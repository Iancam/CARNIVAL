if (Example == 1) {
if (Network == 1) { Net <- "positive" } else if (Network == 2) { Net <- "negative" }
network      <- read.table(paste("examples/Ex1/network_Ex1_",Net,".sif",sep=""), sep = "\t", header = FALSE)
inputs       <- read.table(paste("examples/Ex1/inputs_Case", toString(Case_study), ".txt",sep=""), sep="\t", header = TRUE)
measurements <- read_delim(paste("examples/Ex1/measurements_Case", toString(Case_study), ".txt",sep=""), "\t", escape_double = FALSE, trim_ws = TRUE)
} else if (Example == 2) {
if (Network == 1) { Net <- "PosPos" } else if (Network == 2) { Net <- "PosNeg" }
network      <- read.table(paste("examples/Ex2/network_Ex2_",Net,".sif",sep=""), sep = "\t", header = FALSE)
inputs       <- read.table(paste("examples/Ex2/inputs_Case", toString(Case_study), ".txt",sep=""), sep="\t", header = TRUE)
measurements <- read_delim(paste("examples/Ex2/measurements_Case", toString(Case_study), ".txt",sep=""), "\t", escape_double = FALSE, trim_ws = TRUE)
} else if (Example == 3) {
if (Network == 1) { Net <- "SameSign" } else if (Network == 2) { Net <- "InverseSign" }
network      <- read.table(paste("examples/Ex3/network_Ex3_",Net,".sif",sep=""), sep = "\t", header = FALSE)
inputs       <- read.table(paste("examples/Ex3/inputs_Case", toString(Case_study), ".txt",sep=""), sep="\t", header = TRUE)
measurements <- read_delim(paste("examples/Ex3/measurements_Case", toString(Case_study), ".txt",sep=""), "\t", escape_double = FALSE, trim_ws = TRUE)
} else if (Example == 4) {
if (Network == 1) { Net <- "PosFB" } else if (Network == 2) { Net <- "NegFB" }
network      <- read.table(paste("examples/Ex4/network_Ex4_",Net,".sif",sep=""), sep = "\t", header = FALSE)
# network      <- read.table(paste("examples/Ex4/network_Ex4_",Net,"_plusOne.sif",sep=""), sep = "\t", header = FALSE)
inputs       <- read.table(paste("examples/Ex4/inputs_Case", toString(Case_study), ".txt",sep=""), sep="\t", header = TRUE)
measurements <- read_delim(paste("examples/Ex4/measurements_Case", toString(Case_study), ".txt",sep=""), "\t", escape_double = FALSE, trim_ws = TRUE)
} else if (Example == 5) {
if (Network == 1) { Net <- "Mike" } else if (Network == 2) { Net <- "Extended" }
network      <- read.table(paste("examples/Ex5/network_Ex5_",Net,".sif",sep=""), sep = "\t", header = FALSE)
inputs       <- read.table(paste("examples/Ex5/inputs_Case", toString(Case_study), ".txt",sep=""), sep="\t", header = TRUE)
measurements <- read_delim(paste("examples/Ex5/measurements_Case", toString(Case_study), ".txt",sep=""), "\t", escape_double = FALSE, trim_ws = TRUE)
}
# Input processing
data <- measurements
pknList <- as.data.frame(network)
colnames(pknList) <- c("Node1", "Sign", "Node2")
setwd(paste0(current_dir,"/src/")) # temporary shift to src directory
# Write constraints as ILP inputs
variables <- writeLPFile(data,pknList,inputs,0.1)
# Solve ILP problem with cplex, remove temp files, and return to the main directory
system(paste0(getwd(), "/cplex -f cplexCommand.txt"))
# file.remove("testFile.lp")
file.remove("cplex.log")
file.copy(from = "results_cplex.txt",to = paste(current_dir,"/results/",dir_name,"/results_cplex.txt",sep=""))
file.remove("results_cplex.txt")
setwd(current_dir)
# Write result files
for(i in 1:length(variables)){
sif <- readOutResult(cplexSolutionFileName = paste("results/",dir_name,"/results_cplex.txt",sep=""), variables = variables, pknList = pknList, conditionIDX = i,dir_name = dir_name, Export_all = Export_all)
}
# --- End of script --- #
# [Debug/QC mode] Print variable names
variables$Condition_1$exp
# --- End of debugging part --- #
# -------------------- #
# CRILPR driver script #
# -------------------- #
rm(list=ls()) # clear environment
cat("\014") # clear screen
# Select a case study [Note: please add your another Example and paths to inputs files for your own study below]
Example    <- 2 # c(1,2,3,4,5)
Case_study <- 1 # c(1,2,3,4) or c(c(1,2),c(1,4))
Network    <- 1 # c(1,2) == c("positive","negative") / c("pos-pos","pos-neg") / c("same_sign","inverse_sign") / c("pos_FB","neg_FB") / c("Mike")
Result_dir <- "Ex2Case1Net1" # specify a name for result directory; if NULL, then date and time will be used by default
Export_all <- 0 # c(0,1) export all ILP variables or not; if 0, only cplex results, predicted node values and sif file will be written
# ============================== #
# Load necessary packages and functions
library(readr)
library(tidyr)
library(XML)
source("src/CRILPR_Functions.R")
# Create a directory to store results
current_dir <- getwd()
dir.create("results",showWarnings = FALSE)
setwd(paste(current_dir,"/results",sep=""))
if (is.null(Result_dir)) {
dir_name <- paste("results_",Sys.time(),sep="")
} else {
dir_name <- Result_dir
}
dir.create(dir_name); setwd(current_dir)
# Load ILP inputs
if (Example == 1) {
if (Network == 1) { Net <- "positive" } else if (Network == 2) { Net <- "negative" }
network      <- read.table(paste("examples/Ex1/network_Ex1_",Net,".sif",sep=""), sep = "\t", header = FALSE)
inputs       <- read.table(paste("examples/Ex1/inputs_Case", toString(Case_study), ".txt",sep=""), sep="\t", header = TRUE)
measurements <- read_delim(paste("examples/Ex1/measurements_Case", toString(Case_study), ".txt",sep=""), "\t", escape_double = FALSE, trim_ws = TRUE)
} else if (Example == 2) {
if (Network == 1) { Net <- "PosPos" } else if (Network == 2) { Net <- "PosNeg" }
network      <- read.table(paste("examples/Ex2/network_Ex2_",Net,".sif",sep=""), sep = "\t", header = FALSE)
inputs       <- read.table(paste("examples/Ex2/inputs_Case", toString(Case_study), ".txt",sep=""), sep="\t", header = TRUE)
measurements <- read_delim(paste("examples/Ex2/measurements_Case", toString(Case_study), ".txt",sep=""), "\t", escape_double = FALSE, trim_ws = TRUE)
} else if (Example == 3) {
if (Network == 1) { Net <- "SameSign" } else if (Network == 2) { Net <- "InverseSign" }
network      <- read.table(paste("examples/Ex3/network_Ex3_",Net,".sif",sep=""), sep = "\t", header = FALSE)
inputs       <- read.table(paste("examples/Ex3/inputs_Case", toString(Case_study), ".txt",sep=""), sep="\t", header = TRUE)
measurements <- read_delim(paste("examples/Ex3/measurements_Case", toString(Case_study), ".txt",sep=""), "\t", escape_double = FALSE, trim_ws = TRUE)
} else if (Example == 4) {
if (Network == 1) { Net <- "PosFB" } else if (Network == 2) { Net <- "NegFB" }
network      <- read.table(paste("examples/Ex4/network_Ex4_",Net,".sif",sep=""), sep = "\t", header = FALSE)
# network      <- read.table(paste("examples/Ex4/network_Ex4_",Net,"_plusOne.sif",sep=""), sep = "\t", header = FALSE)
inputs       <- read.table(paste("examples/Ex4/inputs_Case", toString(Case_study), ".txt",sep=""), sep="\t", header = TRUE)
measurements <- read_delim(paste("examples/Ex4/measurements_Case", toString(Case_study), ".txt",sep=""), "\t", escape_double = FALSE, trim_ws = TRUE)
} else if (Example == 5) {
if (Network == 1) { Net <- "Mike" } else if (Network == 2) { Net <- "Extended" }
network      <- read.table(paste("examples/Ex5/network_Ex5_",Net,".sif",sep=""), sep = "\t", header = FALSE)
inputs       <- read.table(paste("examples/Ex5/inputs_Case", toString(Case_study), ".txt",sep=""), sep="\t", header = TRUE)
measurements <- read_delim(paste("examples/Ex5/measurements_Case", toString(Case_study), ".txt",sep=""), "\t", escape_double = FALSE, trim_ws = TRUE)
}
# Input processing
data <- measurements
pknList <- as.data.frame(network)
colnames(pknList) <- c("Node1", "Sign", "Node2")
setwd(paste0(current_dir,"/src/")) # temporary shift to src directory
# Write constraints as ILP inputs
variables <- writeLPFile(data,pknList,inputs,0.1)
# Solve ILP problem with cplex, remove temp files, and return to the main directory
system(paste0(getwd(), "/cplex -f cplexCommand.txt"))
# file.remove("testFile.lp")
file.remove("cplex.log")
file.copy(from = "results_cplex.txt",to = paste(current_dir,"/results/",dir_name,"/results_cplex.txt",sep=""))
file.remove("results_cplex.txt")
setwd(current_dir)
# Write result files
for(i in 1:length(variables)){
sif <- readOutResult(cplexSolutionFileName = paste("results/",dir_name,"/results_cplex.txt",sep=""), variables = variables, pknList = pknList, conditionIDX = i,dir_name = dir_name, Export_all = Export_all)
}
# --- End of script --- #
# [Debug/QC mode] Print variable names
variables$Condition_1$exp
# --- End of debugging part --- #
# -------------------- #
# CRILPR driver script #
# -------------------- #
rm(list=ls()) # clear environment
cat("\014") # clear screen
# Select a case study [Note: please add your another Example and paths to inputs files for your own study below]
Example    <- 1 # c(1,2,3,4,5)
Case_study <- 1 # c(1,2,3,4) or c(c(1,2),c(1,4))
Network    <- 1 # c(1,2) == c("positive","negative") / c("pos-pos","pos-neg") / c("same_sign","inverse_sign") / c("pos_FB","neg_FB") / c("Mike")
Result_dir <- "Ex1Case1Net1" # specify a name for result directory; if NULL, then date and time will be used by default
Export_all <- 0 # c(0,1) export all ILP variables or not; if 0, only cplex results, predicted node values and sif file will be written
# ============================== #
# Load necessary packages and functions
library(readr)
library(tidyr)
library(XML)
source("src/CRILPR_Functions.R")
# Create a directory to store results
current_dir <- getwd()
dir.create("results",showWarnings = FALSE)
setwd(paste(current_dir,"/results",sep=""))
if (is.null(Result_dir)) {
dir_name <- paste("results_",Sys.time(),sep="")
} else {
dir_name <- Result_dir
}
dir.create(dir_name); setwd(current_dir)
# Load ILP inputs
if (Example == 1) {
if (Network == 1) { Net <- "positive" } else if (Network == 2) { Net <- "negative" }
network      <- read.table(paste("examples/Ex1/network_Ex1_",Net,".sif",sep=""), sep = "\t", header = FALSE)
inputs       <- read.table(paste("examples/Ex1/inputs_Case", toString(Case_study), ".txt",sep=""), sep="\t", header = TRUE)
measurements <- read_delim(paste("examples/Ex1/measurements_Case", toString(Case_study), ".txt",sep=""), "\t", escape_double = FALSE, trim_ws = TRUE)
} else if (Example == 2) {
if (Network == 1) { Net <- "PosPos" } else if (Network == 2) { Net <- "PosNeg" }
network      <- read.table(paste("examples/Ex2/network_Ex2_",Net,".sif",sep=""), sep = "\t", header = FALSE)
inputs       <- read.table(paste("examples/Ex2/inputs_Case", toString(Case_study), ".txt",sep=""), sep="\t", header = TRUE)
measurements <- read_delim(paste("examples/Ex2/measurements_Case", toString(Case_study), ".txt",sep=""), "\t", escape_double = FALSE, trim_ws = TRUE)
} else if (Example == 3) {
if (Network == 1) { Net <- "SameSign" } else if (Network == 2) { Net <- "InverseSign" }
network      <- read.table(paste("examples/Ex3/network_Ex3_",Net,".sif",sep=""), sep = "\t", header = FALSE)
inputs       <- read.table(paste("examples/Ex3/inputs_Case", toString(Case_study), ".txt",sep=""), sep="\t", header = TRUE)
measurements <- read_delim(paste("examples/Ex3/measurements_Case", toString(Case_study), ".txt",sep=""), "\t", escape_double = FALSE, trim_ws = TRUE)
} else if (Example == 4) {
if (Network == 1) { Net <- "PosFB" } else if (Network == 2) { Net <- "NegFB" }
network      <- read.table(paste("examples/Ex4/network_Ex4_",Net,".sif",sep=""), sep = "\t", header = FALSE)
# network      <- read.table(paste("examples/Ex4/network_Ex4_",Net,"_plusOne.sif",sep=""), sep = "\t", header = FALSE)
inputs       <- read.table(paste("examples/Ex4/inputs_Case", toString(Case_study), ".txt",sep=""), sep="\t", header = TRUE)
measurements <- read_delim(paste("examples/Ex4/measurements_Case", toString(Case_study), ".txt",sep=""), "\t", escape_double = FALSE, trim_ws = TRUE)
} else if (Example == 5) {
if (Network == 1) { Net <- "Mike" } else if (Network == 2) { Net <- "Extended" }
network      <- read.table(paste("examples/Ex5/network_Ex5_",Net,".sif",sep=""), sep = "\t", header = FALSE)
inputs       <- read.table(paste("examples/Ex5/inputs_Case", toString(Case_study), ".txt",sep=""), sep="\t", header = TRUE)
measurements <- read_delim(paste("examples/Ex5/measurements_Case", toString(Case_study), ".txt",sep=""), "\t", escape_double = FALSE, trim_ws = TRUE)
}
# Input processing
data <- measurements
pknList <- as.data.frame(network)
colnames(pknList) <- c("Node1", "Sign", "Node2")
setwd(paste0(current_dir,"/src/")) # temporary shift to src directory
# Write constraints as ILP inputs
variables <- writeLPFile(data,pknList,inputs,0.1)
# Solve ILP problem with cplex, remove temp files, and return to the main directory
system(paste0(getwd(), "/cplex -f cplexCommand.txt"))
# file.remove("testFile.lp")
file.remove("cplex.log")
file.copy(from = "results_cplex.txt",to = paste(current_dir,"/results/",dir_name,"/results_cplex.txt",sep=""))
file.remove("results_cplex.txt")
setwd(current_dir)
# Write result files
for(i in 1:length(variables)){
sif <- readOutResult(cplexSolutionFileName = paste("results/",dir_name,"/results_cplex.txt",sep=""), variables = variables, pknList = pknList, conditionIDX = i,dir_name = dir_name, Export_all = Export_all)
}
# --- End of script --- #
# [Debug/QC mode] Print variable names
variables$Condition_1$exp
# --- End of debugging part --- #
rm(list=ls()) # clear environment
cat("\014") # clear screen
Example    <- 1 # c(1,2,3,4,5)
Case_study <- 1 # c(1,2,3,4) or c(c(1,2),c(1,4))
Network    <- 1 # c(1,2) == c("positive","negative") / c("pos-pos","pos-neg") / c("same_sign","inverse_sign") / c("pos_FB","neg_FB") / c("Mike")
Result_dir <- "Ex1Case1Net1" # specify a name for result directory; if NULL, then date and time will be used by default
Export_all <- 0 # c(0,1) export all ILP variables or not; if 0, only cplex results, predicted node values and sif file will be written
library(readr)
library(tidyr)
library(XML)
source("src/CRILPR_Functions.R")
current_dir <- getwd()
dir.create("results",showWarnings = FALSE)
setwd(paste(current_dir,"/results",sep=""))
if (is.null(Result_dir)) {
dir_name <- paste("results_",Sys.time(),sep="")
} else {
dir_name <- Result_dir
}
dir.create(dir_name); setwd(current_dir)
if (Example == 1) {
if (Network == 1) { Net <- "positive" } else if (Network == 2) { Net <- "negative" }
network      <- read.table(paste("examples/Ex1/network_Ex1_",Net,".sif",sep=""), sep = "\t", header = FALSE)
inputs       <- read.table(paste("examples/Ex1/inputs_Case", toString(Case_study), ".txt",sep=""), sep="\t", header = TRUE)
measurements <- read_delim(paste("examples/Ex1/measurements_Case", toString(Case_study), ".txt",sep=""), "\t", escape_double = FALSE, trim_ws = TRUE)
} else if (Example == 2) {
if (Network == 1) { Net <- "PosPos" } else if (Network == 2) { Net <- "PosNeg" }
network      <- read.table(paste("examples/Ex2/network_Ex2_",Net,".sif",sep=""), sep = "\t", header = FALSE)
inputs       <- read.table(paste("examples/Ex2/inputs_Case", toString(Case_study), ".txt",sep=""), sep="\t", header = TRUE)
measurements <- read_delim(paste("examples/Ex2/measurements_Case", toString(Case_study), ".txt",sep=""), "\t", escape_double = FALSE, trim_ws = TRUE)
} else if (Example == 3) {
if (Network == 1) { Net <- "SameSign" } else if (Network == 2) { Net <- "InverseSign" }
network      <- read.table(paste("examples/Ex3/network_Ex3_",Net,".sif",sep=""), sep = "\t", header = FALSE)
inputs       <- read.table(paste("examples/Ex3/inputs_Case", toString(Case_study), ".txt",sep=""), sep="\t", header = TRUE)
measurements <- read_delim(paste("examples/Ex3/measurements_Case", toString(Case_study), ".txt",sep=""), "\t", escape_double = FALSE, trim_ws = TRUE)
} else if (Example == 4) {
if (Network == 1) { Net <- "PosFB" } else if (Network == 2) { Net <- "NegFB" }
network      <- read.table(paste("examples/Ex4/network_Ex4_",Net,".sif",sep=""), sep = "\t", header = FALSE)
# network      <- read.table(paste("examples/Ex4/network_Ex4_",Net,"_plusOne.sif",sep=""), sep = "\t", header = FALSE)
inputs       <- read.table(paste("examples/Ex4/inputs_Case", toString(Case_study), ".txt",sep=""), sep="\t", header = TRUE)
measurements <- read_delim(paste("examples/Ex4/measurements_Case", toString(Case_study), ".txt",sep=""), "\t", escape_double = FALSE, trim_ws = TRUE)
} else if (Example == 5) {
if (Network == 1) { Net <- "Mike" } else if (Network == 2) { Net <- "Extended" }
network      <- read.table(paste("examples/Ex5/network_Ex5_",Net,".sif",sep=""), sep = "\t", header = FALSE)
inputs       <- read.table(paste("examples/Ex5/inputs_Case", toString(Case_study), ".txt",sep=""), sep="\t", header = TRUE)
measurements <- read_delim(paste("examples/Ex5/measurements_Case", toString(Case_study), ".txt",sep=""), "\t", escape_double = FALSE, trim_ws = TRUE)
}
data <- measurements
pknList <- as.data.frame(network)
colnames(pknList) <- c("Node1", "Sign", "Node2")
setwd(paste0(current_dir,"/src/")) # temporary shift to src directory
dataMatrix <- buildDataMatrix(data = data, pknList = pknList, inputs = inputs, cutoff = 0.1)
variables <- create_variables_all(pknList = pknList, dataMatrix = dataMatrix)
oF <- write_objective_function_all(dataMatrix = dataMatrix, variables = variables, alpha = 100, beta = 10)
bounds <- write_boundaries(variables = variables, oF=oF)
bounds <- write_boundaries(variables = variables)
binaries <- write_binaries(variables = variables)
generals <- write_generals(variables = variables, oF = oF)
c0 <- write_constraints_objFunction_all(variables = variables, dataMatrix = dataMatrix)
c1 <- write_constraints_1_all(variables = variables)
c2 <- write_constraints_2_all(variables = variables)
c3 <- write_constraints_3_all(variables = variables)
c4 <- write_constraints_4_all(variables = variables)
c5 <- write_constraints_5_all(variables = variables)
c6 <- write_constraints_6(variables = variables, dataMatrix = dataMatrix, inputs = inputs)
c7 <- write_constraints_7(variables = variables, dataMatrix = dataMatrix, inputs = inputs)
c8 <- write_constraints_8(variables = variables, inputs = inputs)
c9 <- write_loop_constraints(variables = variables, pknList = pknList, inputs = inputs)
allC <- all_constraints_wLoop(c0 = c0, c1 = c1, c2 = c2, c3 = c3, c4 = c4, c5 = c5, c6 = c6, c7 = c7, c8 = c8, c9 = c9)
c6 <- write_constraints_6(variables = variables, dataMatrix = dataMatrix, inputs = inputs)
rm(list=ls()) # clear environment
cat("\014") # clear screen
Example    <- 1 # c(1,2,3,4,5)
Case_study <- 1 # c(1,2,3,4) or c(c(1,2),c(1,4))
Network    <- 1 # c(1,2) == c("positive","negative") / c("pos-pos","pos-neg") / c("same_sign","inverse_sign") / c("pos_FB","neg_FB") / c("Mike")
Result_dir <- "Ex1Case1Net1" # specify a name for result directory; if NULL, then date and time will be used by default
Export_all <- 0 # c(0,1) export all ILP variables or not; if 0, only cplex results, predicted node values and sif file will be written
library(readr)
library(tidyr)
library(XML)
source("src/CRILPR_Functions.R")
current_dir <- getwd()
setwd("~/Desktop/RWTH_Aachen/GitHub/CRILPR")
rm(list=ls()) # clear environment
cat("\014") # clear screen
Example    <- 1 # c(1,2,3,4,5)
Case_study <- 1 # c(1,2,3,4) or c(c(1,2),c(1,4))
Network    <- 1 # c(1,2) == c("positive","negative") / c("pos-pos","pos-neg") / c("same_sign","inverse_sign") / c("pos_FB","neg_FB") / c("Mike")
Result_dir <- "Ex1Case1Net1" # specify a name for result directory; if NULL, then date and time will be used by default
Export_all <- 0 # c(0,1) export all ILP variables or not; if 0, only cplex results, predicted node values and sif file will be written
library(readr)
library(tidyr)
library(XML)
source("src/CRILPR_Functions.R")
current_dir <- getwd()
dir.create("results",showWarnings = FALSE)
setwd(paste(current_dir,"/results",sep=""))
if (is.null(Result_dir)) {
dir_name <- paste("results_",Sys.time(),sep="")
} else {
dir_name <- Result_dir
}
dir.create(dir_name); setwd(current_dir)
if (Example == 1) {
if (Network == 1) { Net <- "positive" } else if (Network == 2) { Net <- "negative" }
network      <- read.table(paste("examples/Ex1/network_Ex1_",Net,".sif",sep=""), sep = "\t", header = FALSE)
inputs       <- read.table(paste("examples/Ex1/inputs_Case", toString(Case_study), ".txt",sep=""), sep="\t", header = TRUE)
measurements <- read_delim(paste("examples/Ex1/measurements_Case", toString(Case_study), ".txt",sep=""), "\t", escape_double = FALSE, trim_ws = TRUE)
} else if (Example == 2) {
if (Network == 1) { Net <- "PosPos" } else if (Network == 2) { Net <- "PosNeg" }
network      <- read.table(paste("examples/Ex2/network_Ex2_",Net,".sif",sep=""), sep = "\t", header = FALSE)
inputs       <- read.table(paste("examples/Ex2/inputs_Case", toString(Case_study), ".txt",sep=""), sep="\t", header = TRUE)
measurements <- read_delim(paste("examples/Ex2/measurements_Case", toString(Case_study), ".txt",sep=""), "\t", escape_double = FALSE, trim_ws = TRUE)
} else if (Example == 3) {
if (Network == 1) { Net <- "SameSign" } else if (Network == 2) { Net <- "InverseSign" }
network      <- read.table(paste("examples/Ex3/network_Ex3_",Net,".sif",sep=""), sep = "\t", header = FALSE)
inputs       <- read.table(paste("examples/Ex3/inputs_Case", toString(Case_study), ".txt",sep=""), sep="\t", header = TRUE)
measurements <- read_delim(paste("examples/Ex3/measurements_Case", toString(Case_study), ".txt",sep=""), "\t", escape_double = FALSE, trim_ws = TRUE)
} else if (Example == 4) {
if (Network == 1) { Net <- "PosFB" } else if (Network == 2) { Net <- "NegFB" }
network      <- read.table(paste("examples/Ex4/network_Ex4_",Net,".sif",sep=""), sep = "\t", header = FALSE)
# network      <- read.table(paste("examples/Ex4/network_Ex4_",Net,"_plusOne.sif",sep=""), sep = "\t", header = FALSE)
inputs       <- read.table(paste("examples/Ex4/inputs_Case", toString(Case_study), ".txt",sep=""), sep="\t", header = TRUE)
measurements <- read_delim(paste("examples/Ex4/measurements_Case", toString(Case_study), ".txt",sep=""), "\t", escape_double = FALSE, trim_ws = TRUE)
} else if (Example == 5) {
if (Network == 1) { Net <- "Mike" } else if (Network == 2) { Net <- "Extended" }
network      <- read.table(paste("examples/Ex5/network_Ex5_",Net,".sif",sep=""), sep = "\t", header = FALSE)
inputs       <- read.table(paste("examples/Ex5/inputs_Case", toString(Case_study), ".txt",sep=""), sep="\t", header = TRUE)
measurements <- read_delim(paste("examples/Ex5/measurements_Case", toString(Case_study), ".txt",sep=""), "\t", escape_double = FALSE, trim_ws = TRUE)
}
data <- measurements
pknList <- as.data.frame(network)
colnames(pknList) <- c("Node1", "Sign", "Node2")
setwd(paste0(current_dir,"/src/")) # temporary shift to src directory
variables <- writeLPFile(data,pknList,inputs,0.1)
dataMatrix <- buildDataMatrix(data = data, pknList = pknList, inputs = inputs, cutoff = 0.1)
variables <- create_variables_all(pknList = pknList, dataMatrix = dataMatrix)
oF <- write_objective_function_all(dataMatrix = dataMatrix, variables = variables, alpha = 100, beta = 10)
bounds <- write_boundaries(variables = variables, oF=oF)
binaries <- write_binaries(variables = variables)
generals <- write_generals(variables = variables, oF = oF)
c0 <- write_constraints_objFunction_all(variables = variables, dataMatrix = dataMatrix)
c1 <- write_constraints_1_all(variables = variables)
c2 <- write_constraints_2_all(variables = variables)
c3 <- write_constraints_3_all(variables = variables)
c4 <- write_constraints_4_all(variables = variables)
c5 <- write_constraints_5_all(variables = variables)
c6 <- write_constraints_6(variables = variables, dataMatrix = dataMatrix, inputs = inputs)
c7 <- write_constraints_7(variables = variables, dataMatrix = dataMatrix, inputs = inputs)
c8 <- write_constraints_8(variables = variables, inputs = inputs)
rm(list=ls()) # clear environment
cat("\014") # clear screen
Example    <- 1 # c(1,2,3,4,5)
Case_study <- 1 # c(1,2,3,4) or c(c(1,2),c(1,4))
Network    <- 1 # c(1,2) == c("positive","negative") / c("pos-pos","pos-neg") / c("same_sign","inverse_sign") / c("pos_FB","neg_FB") / c("Mike")
Result_dir <- "Ex1Case1Net1" # specify a name for result directory; if NULL, then date and time will be used by default
Export_all <- 0 # c(0,1) export all ILP variables or not; if 0, only cplex results, predicted node values and sif file will be written
library(readr)
library(tidyr)
library(XML)
source("src/CRILPR_Functions.R")
current_dir <- getwd()
dir.create("results",showWarnings = FALSE)
setwd(paste(current_dir,"/results",sep=""))
if (is.null(Result_dir)) {
dir_name <- paste("results_",Sys.time(),sep="")
} else {
dir_name <- Result_dir
}
dir.create(dir_name); setwd(current_dir)
if (Example == 1) {
if (Network == 1) { Net <- "positive" } else if (Network == 2) { Net <- "negative" }
network      <- read.table(paste("examples/Ex1/network_Ex1_",Net,".sif",sep=""), sep = "\t", header = FALSE)
inputs       <- read.table(paste("examples/Ex1/inputs_Case", toString(Case_study), ".txt",sep=""), sep="\t", header = TRUE)
measurements <- read_delim(paste("examples/Ex1/measurements_Case", toString(Case_study), ".txt",sep=""), "\t", escape_double = FALSE, trim_ws = TRUE)
} else if (Example == 2) {
if (Network == 1) { Net <- "PosPos" } else if (Network == 2) { Net <- "PosNeg" }
network      <- read.table(paste("examples/Ex2/network_Ex2_",Net,".sif",sep=""), sep = "\t", header = FALSE)
inputs       <- read.table(paste("examples/Ex2/inputs_Case", toString(Case_study), ".txt",sep=""), sep="\t", header = TRUE)
measurements <- read_delim(paste("examples/Ex2/measurements_Case", toString(Case_study), ".txt",sep=""), "\t", escape_double = FALSE, trim_ws = TRUE)
} else if (Example == 3) {
if (Network == 1) { Net <- "SameSign" } else if (Network == 2) { Net <- "InverseSign" }
network      <- read.table(paste("examples/Ex3/network_Ex3_",Net,".sif",sep=""), sep = "\t", header = FALSE)
inputs       <- read.table(paste("examples/Ex3/inputs_Case", toString(Case_study), ".txt",sep=""), sep="\t", header = TRUE)
measurements <- read_delim(paste("examples/Ex3/measurements_Case", toString(Case_study), ".txt",sep=""), "\t", escape_double = FALSE, trim_ws = TRUE)
} else if (Example == 4) {
if (Network == 1) { Net <- "PosFB" } else if (Network == 2) { Net <- "NegFB" }
network      <- read.table(paste("examples/Ex4/network_Ex4_",Net,".sif",sep=""), sep = "\t", header = FALSE)
# network      <- read.table(paste("examples/Ex4/network_Ex4_",Net,"_plusOne.sif",sep=""), sep = "\t", header = FALSE)
inputs       <- read.table(paste("examples/Ex4/inputs_Case", toString(Case_study), ".txt",sep=""), sep="\t", header = TRUE)
measurements <- read_delim(paste("examples/Ex4/measurements_Case", toString(Case_study), ".txt",sep=""), "\t", escape_double = FALSE, trim_ws = TRUE)
} else if (Example == 5) {
if (Network == 1) { Net <- "Mike" } else if (Network == 2) { Net <- "Extended" }
network      <- read.table(paste("examples/Ex5/network_Ex5_",Net,".sif",sep=""), sep = "\t", header = FALSE)
inputs       <- read.table(paste("examples/Ex5/inputs_Case", toString(Case_study), ".txt",sep=""), sep="\t", header = TRUE)
measurements <- read_delim(paste("examples/Ex5/measurements_Case", toString(Case_study), ".txt",sep=""), "\t", escape_double = FALSE, trim_ws = TRUE)
}
data <- measurements
setwd("~/Desktop/RWTH_Aachen/GitHub/CRILPR")
rm(list=ls()) # clear environment
cat("\014") # clear screen
Example    <- 1 # c(1,2,3,4,5)
Case_study <- 1 # c(1,2,3,4) or c(c(1,2),c(1,4))
Network    <- 1 # c(1,2) == c("positive","negative") / c("pos-pos","pos-neg") / c("same_sign","inverse_sign") / c("pos_FB","neg_FB") / c("Mike")
Result_dir <- "Ex1Case1Net1" # specify a name for result directory; if NULL, then date and time will be used by default
Export_all <- 0 # c(0,1) export all ILP variables or not; if 0, only cplex results, predicted node values and sif file will be written
library(readr)
library(tidyr)
library(XML)
source("src/CRILPR_Functions.R")
current_dir <- getwd()
dir.create("results",showWarnings = FALSE)
setwd(paste(current_dir,"/results",sep=""))
if (is.null(Result_dir)) {
dir_name <- paste("results_",Sys.time(),sep="")
} else {
dir_name <- Result_dir
}
dir.create(dir_name); setwd(current_dir)
if (Example == 1) {
if (Network == 1) { Net <- "positive" } else if (Network == 2) { Net <- "negative" }
network      <- read.table(paste("examples/Ex1/network_Ex1_",Net,".sif",sep=""), sep = "\t", header = FALSE)
inputs       <- read.table(paste("examples/Ex1/inputs_Case", toString(Case_study), ".txt",sep=""), sep="\t", header = TRUE)
measurements <- read_delim(paste("examples/Ex1/measurements_Case", toString(Case_study), ".txt",sep=""), "\t", escape_double = FALSE, trim_ws = TRUE)
} else if (Example == 2) {
if (Network == 1) { Net <- "PosPos" } else if (Network == 2) { Net <- "PosNeg" }
network      <- read.table(paste("examples/Ex2/network_Ex2_",Net,".sif",sep=""), sep = "\t", header = FALSE)
inputs       <- read.table(paste("examples/Ex2/inputs_Case", toString(Case_study), ".txt",sep=""), sep="\t", header = TRUE)
measurements <- read_delim(paste("examples/Ex2/measurements_Case", toString(Case_study), ".txt",sep=""), "\t", escape_double = FALSE, trim_ws = TRUE)
} else if (Example == 3) {
if (Network == 1) { Net <- "SameSign" } else if (Network == 2) { Net <- "InverseSign" }
network      <- read.table(paste("examples/Ex3/network_Ex3_",Net,".sif",sep=""), sep = "\t", header = FALSE)
inputs       <- read.table(paste("examples/Ex3/inputs_Case", toString(Case_study), ".txt",sep=""), sep="\t", header = TRUE)
measurements <- read_delim(paste("examples/Ex3/measurements_Case", toString(Case_study), ".txt",sep=""), "\t", escape_double = FALSE, trim_ws = TRUE)
} else if (Example == 4) {
if (Network == 1) { Net <- "PosFB" } else if (Network == 2) { Net <- "NegFB" }
network      <- read.table(paste("examples/Ex4/network_Ex4_",Net,".sif",sep=""), sep = "\t", header = FALSE)
# network      <- read.table(paste("examples/Ex4/network_Ex4_",Net,"_plusOne.sif",sep=""), sep = "\t", header = FALSE)
inputs       <- read.table(paste("examples/Ex4/inputs_Case", toString(Case_study), ".txt",sep=""), sep="\t", header = TRUE)
measurements <- read_delim(paste("examples/Ex4/measurements_Case", toString(Case_study), ".txt",sep=""), "\t", escape_double = FALSE, trim_ws = TRUE)
} else if (Example == 5) {
if (Network == 1) { Net <- "Mike" } else if (Network == 2) { Net <- "Extended" }
network      <- read.table(paste("examples/Ex5/network_Ex5_",Net,".sif",sep=""), sep = "\t", header = FALSE)
inputs       <- read.table(paste("examples/Ex5/inputs_Case", toString(Case_study), ".txt",sep=""), sep="\t", header = TRUE)
measurements <- read_delim(paste("examples/Ex5/measurements_Case", toString(Case_study), ".txt",sep=""), "\t", escape_double = FALSE, trim_ws = TRUE)
}
data <- measurements
pknList <- as.data.frame(network)
colnames(pknList) <- c("Node1", "Sign", "Node2")
setwd(paste0(current_dir,"/src/")) # temporary shift to src directory
variables <- writeLPFile(data,pknList,inputs,0.1)
system(paste0(getwd(), "/cplex -f cplexCommand.txt"))
file.remove("cplex.log")
setwd("~/Desktop/RWTH_Aachen/GitHub/CRILPR")
rm(list=ls()) # clear environment
cat("\014") # clear screen
Example    <- 1 # c(1,2,3,4,5)
Case_study <- 1 # c(1,2,3,4) or c(c(1,2),c(1,4))
Network    <- 1 # c(1,2) == c("positive","negative") / c("pos-pos","pos-neg") / c("same_sign","inverse_sign") / c("pos_FB","neg_FB") / c("Mike")
Result_dir <- "Ex1Case1Net1" # specify a name for result directory; if NULL, then date and time will be used by default
Export_all <- 0 # c(0,1) export all ILP variables or not; if 0, only cplex results, predicted node values and sif file will be written
library(readr)
library(tidyr)
library(XML)
source("src/CRILPR_Functions.R")
current_dir <- getwd()
dir.create("results",showWarnings = FALSE)
setwd(paste(current_dir,"/results",sep=""))
if (is.null(Result_dir)) {
dir_name <- paste("results_",Sys.time(),sep="")
} else {
dir_name <- Result_dir
}
dir.create(dir_name); setwd(current_dir)
if (Example == 1) {
if (Network == 1) { Net <- "positive" } else if (Network == 2) { Net <- "negative" }
network      <- read.table(paste("examples/Ex1/network_Ex1_",Net,".sif",sep=""), sep = "\t", header = FALSE)
inputs       <- read.table(paste("examples/Ex1/inputs_Case", toString(Case_study), ".txt",sep=""), sep="\t", header = TRUE)
measurements <- read_delim(paste("examples/Ex1/measurements_Case", toString(Case_study), ".txt",sep=""), "\t", escape_double = FALSE, trim_ws = TRUE)
} else if (Example == 2) {
if (Network == 1) { Net <- "PosPos" } else if (Network == 2) { Net <- "PosNeg" }
network      <- read.table(paste("examples/Ex2/network_Ex2_",Net,".sif",sep=""), sep = "\t", header = FALSE)
inputs       <- read.table(paste("examples/Ex2/inputs_Case", toString(Case_study), ".txt",sep=""), sep="\t", header = TRUE)
measurements <- read_delim(paste("examples/Ex2/measurements_Case", toString(Case_study), ".txt",sep=""), "\t", escape_double = FALSE, trim_ws = TRUE)
} else if (Example == 3) {
if (Network == 1) { Net <- "SameSign" } else if (Network == 2) { Net <- "InverseSign" }
network      <- read.table(paste("examples/Ex3/network_Ex3_",Net,".sif",sep=""), sep = "\t", header = FALSE)
inputs       <- read.table(paste("examples/Ex3/inputs_Case", toString(Case_study), ".txt",sep=""), sep="\t", header = TRUE)
measurements <- read_delim(paste("examples/Ex3/measurements_Case", toString(Case_study), ".txt",sep=""), "\t", escape_double = FALSE, trim_ws = TRUE)
} else if (Example == 4) {
if (Network == 1) { Net <- "PosFB" } else if (Network == 2) { Net <- "NegFB" }
network      <- read.table(paste("examples/Ex4/network_Ex4_",Net,".sif",sep=""), sep = "\t", header = FALSE)
# network      <- read.table(paste("examples/Ex4/network_Ex4_",Net,"_plusOne.sif",sep=""), sep = "\t", header = FALSE)
inputs       <- read.table(paste("examples/Ex4/inputs_Case", toString(Case_study), ".txt",sep=""), sep="\t", header = TRUE)
measurements <- read_delim(paste("examples/Ex4/measurements_Case", toString(Case_study), ".txt",sep=""), "\t", escape_double = FALSE, trim_ws = TRUE)
} else if (Example == 5) {
if (Network == 1) { Net <- "Mike" } else if (Network == 2) { Net <- "Extended" }
network      <- read.table(paste("examples/Ex5/network_Ex5_",Net,".sif",sep=""), sep = "\t", header = FALSE)
inputs       <- read.table(paste("examples/Ex5/inputs_Case", toString(Case_study), ".txt",sep=""), sep="\t", header = TRUE)
measurements <- read_delim(paste("examples/Ex5/measurements_Case", toString(Case_study), ".txt",sep=""), "\t", escape_double = FALSE, trim_ws = TRUE)
}
data <- measurements
pknList <- as.data.frame(network)
colnames(pknList) <- c("Node1", "Sign", "Node2")
setwd(paste0(current_dir,"/src/")) # temporary shift to src directory
variables <- writeLPFile(data,pknList,inputs,0.1)
system(paste0(getwd(), "/cplex -f cplexCommand.txt"))
file.remove("cplex.log")
file.copy(from = "results_cplex.txt",to = paste(current_dir,"/results/",dir_name,"/results_cplex.txt",sep=""))
