} else {
stop("Please choose a case study from the provided list")
}
model <- preprocessing(CNOlistModel, pknmodel, expansion=TRUE,
compression=TRUE, cutNONC=TRUE, verbose=FALSE)
if (!InitRand) {
initBstring<-rep(1,length(model$reacID))
} else {
initBstring<-rbinom(length(model$reacID),1,0.5)
}
ptm <- proc.time()
All_opt_pars <- list()
BestCost <- NULL
for (counter_rep in 1:rep) {
print(paste0("Optimising original model round ",toString(counter_rep),"/",toString(rep)))
ToyT1opt<-gaBinaryT1(CNOlist=CNOlistModel, model=model,
initBstring=initBstring, sizeFac = sizeFac,
NAFac = NAFac, popSize = popSize, pMutation = pMutation, maxTime = maxTime,
maxGens = maxGens, stallGenMax = stallGenMax, selPress = selPress,
elitism = elitism, relTol = relTol, verbose = verbose, timeIndex = timeIndex)
BestCost <- c(BestCost,ToyT1opt$bScore)
All_opt_pars[[counter_rep]] <- ToyT1opt
}
setwd("~/Desktop/RWTH_Aachen/GitHub/CARNIVAL/archive/CARNIVAL_Validation/E-MTAB-2091/validation")
rm(list=ls());cat("\014")
setwd("~/Desktop/RWTH_Aachen/GitHub/CARNIVAL/archive/CARNIVAL_Validation/E-MTAB-2091/validation/") # set working directory (relative)
PP5min <- read.table("E-MTAB-2091_PP5min.csv",header=T,sep=",",stringsAsFactors = F)
PP25min <- read.table("E-MTAB-2091_PP25min.csv",header=T,sep=",",stringsAsFactors = F)
MeasuredPP <- colnames(PP5min)[4:ncol(PP5min)] # Same list and order between PP5min and PP25min
MeasuredPP_HGNC <- c("AKT1","CREB1","EGFR","MAPK3","PTK2","GSK3B","HSPB1","NFKBIA","MAPK9","MAP2K1","MAP2K6","NFKB1","MAPK14","TP53","RPS6KB1","RSPH6A","PTPN11","WNK1","RPS6KA1")
CompoundsPP <- PP5min[,1]
CompoundsPP_All <- NULL
for (counter in 1:length(CompoundsPP)) {
CompoundsPP_All[[counter]] <- strsplit(CompoundsPP[counter],split = " ",fixed = T)
}
CompoundsPP_Names <- NULL
for (counter in 1:length(CompoundsPP_All)) {
if (length(CompoundsPP_All[[counter]][[1]])==1) {
CompoundsPP_Names[[counter]] <- CompoundsPP_All[[counter]][[1]][1]
} else {
if (grepl(pattern = "(",x = CompoundsPP_All[[counter]][[1]][2],fixed = T)) {
CompoundsPP_Names[[counter]] <- CompoundsPP_All[[counter]][[1]][1]
} else {
CompoundsPP_Names[[counter]] <- paste0(CompoundsPP_All[[counter]][[1]][1],"_",CompoundsPP_All[[counter]][[1]][2])
}
}
}
CompoundsPP_Names <- unlist(CompoundsPP_Names)
Compounds <- t(read.table(file = "~/Desktop/RWTH_Aachen/GitHub/CARNIVAL/archive/CARNIVAL_Validation/E-MTAB-2091/data/All_Compound_Names.tsv",sep = "\r"))
ValResMat <- as.data.frame(matrix(NA,length(Compounds),length(MeasuredPP)*3))
ValResMatCol <- NULL
for (counter in 1:length(MeasuredPP)) {
ValResMatCol <- c(ValResMatCol,paste0(MeasuredPP[counter],"_Mod"),paste0(MeasuredPP[counter],"_5m"),paste0(MeasuredPP[counter],"_25m"))
}
colnames(ValResMat) <- ValResMatCol
rownames(ValResMat) <- Compounds
ValResMatSign <- ValResMat
CutOff <- 0.1
ValResMatSignCutOff <- ValResMat
for (counter_compound in 1:length(Compounds)) {
print(paste0("Now mapping: ",Compounds[counter_compound]))
if (file.exists(paste0("~/Desktop/RWTH_Aachen/GitHub/CARNIVAL/results/validation_",Compounds[counter_compound],"_generic/nodesActivity_1.txt"))) {
NodeAct_current <- read.delim(paste0("~/Desktop/RWTH_Aachen/GitHub/CARNIVAL/results/validation_",Compounds[counter_compound],"_generic/nodesActivity_1.txt"),header=T,sep="\t",stringsAsFactors = F)
# NodeAct_current <- read.delim(paste0("~/Desktop/RWTH_Aachen/GitHub/CARNIVAL/results/validation_",Compounds[counter_compound],"_omnipath/nodesActivity_1.txt"),header=T,sep="\t",stringsAsFactors = F)
Overlapped_Proteins <- intersect(MeasuredPP_HGNC,NodeAct_current[,1])
if (length(Overlapped_Proteins)>0) {
# Writing results for the overlapped proteins
Result_Matrix <- matrix(NA,length(Overlapped_Proteins),4)
colnames(Result_Matrix) <- c("Protein","CARNIVAL","PP5min","PP25min")
Idx_Condition <- which(Compounds[counter_compound]==CompoundsPP_Names)
for (counter in 1:length(Overlapped_Proteins)) {
Current_Overlapped_Protein <- Overlapped_Proteins[counter]
Current_CARNIVAL_output <- NodeAct_current$Activity[NodeAct_current$Nodes==Current_Overlapped_Protein]
Current_PP5min_meas <- PP5min[Idx_Condition,which(Current_Overlapped_Protein==MeasuredPP_HGNC)+3]
Current_PP25min_meas <- PP25min[Idx_Condition,which(Current_Overlapped_Protein==MeasuredPP_HGNC)+3]
Result_Matrix[counter,] <- c(Current_Overlapped_Protein,Current_CARNIVAL_output,Current_PP5min_meas,Current_PP25min_meas)
# map to summarised matrix
Idx_ValResMat <- which(Current_Overlapped_Protein==MeasuredPP_HGNC)
ValResMat[counter_compound,(((Idx_ValResMat-1)*3)+1):(((Idx_ValResMat-1)*3)+3)] <- c(Current_CARNIVAL_output,Current_PP5min_meas,Current_PP25min_meas)
ValResMatSign[counter_compound,(((Idx_ValResMat-1)*3)+1):(((Idx_ValResMat-1)*3)+3)] <- c(Current_CARNIVAL_output,sign(Current_PP5min_meas),sign(Current_PP25min_meas))
ValResMatSignCutOff[counter_compound,(((Idx_ValResMat-1)*3)+1):(((Idx_ValResMat-1)*3)+3)] <- c(Current_CARNIVAL_output,
sign(if (abs(Current_PP5min_meas)<=CutOff) {Current_PP5min_meas=0} else {Current_PP5min_meas}),                                                                                                       sign(if (abs(Current_PP25min_meas)<=CutOff) {Current_PP25min_meas=0} else {Current_PP25min_meas}))
}
write.table(x = Result_Matrix,file = paste0("Validation_Results_",Compounds[counter_compound],"_generic.tsv"),quote = F,sep = "\t",col.names = T,row.names = F)
}
}
}
DiffMat <- matrix(NA,3,length(MeasuredPP_HGNC))
colnames(DiffMat) <- MeasuredPP
rownames(DiffMat) <- c("PP5min","PP25min","NrData")
for (counter_diff in 1:length(MeasuredPP)){
ModVal <- ValResMatSignCutOff[,(((counter_diff-1)*3)+1)]; ModVal <- ModVal[!is.na(ModVal)]
Meas5min <- ValResMatSignCutOff[,(((counter_diff-1)*3)+2)]; Meas5min <- Meas5min[!is.na(Meas5min)]
Meas25min <- ValResMatSignCutOff[,(((counter_diff-1)*3)+3)]; Meas25min <- Meas25min[!is.na(Meas25min)]
DiffMat[,counter_diff] <- c(sum(abs(ModVal-Meas5min))/length(Meas5min),sum(abs(ModVal-Meas25min))/length(Meas25min),length(Meas5min))
}
View(DiffMat)
View(Result_Matrix)
View(ValResMat)
CompoundsPP
CompoundsPP_Names
rm(list=ls());cat("\014")
setwd("~/Desktop/RWTH_Aachen/GitHub/CARNIVAL/archive/CARNIVAL_Validation/E-MTAB-2091/validation/") # set working directory (relative)
PP5min <- read.table("E-MTAB-2091_PP5min.csv",header=T,sep=",",stringsAsFactors = F)
PP25min <- read.table("E-MTAB-2091_PP25min.csv",header=T,sep=",",stringsAsFactors = F)
MeasuredPP <- colnames(PP5min)[4:ncol(PP5min)] # Same list and order between PP5min and PP25min
MeasuredPP_HGNC <- c("AKT1","CREB1","EGFR","MAPK3","PTK2","GSK3B","HSPB1","NFKBIA","MAPK9","MAP2K1","MAP2K6","NFKB1","MAPK14","TP53","RPS6KB1","RSPH6A","PTPN11","WNK1","RPS6KA1")
CompoundsPP <- PP5min[,1]
CompoundsPP_All <- NULL
for (counter in 1:length(CompoundsPP)) {
CompoundsPP_All[[counter]] <- strsplit(CompoundsPP[counter],split = " ",fixed = T)
}
CompoundsPP_Names <- NULL
for (counter in 1:length(CompoundsPP_All)) {
if (length(CompoundsPP_All[[counter]][[1]])==1) {
CompoundsPP_Names[[counter]] <- CompoundsPP_All[[counter]][[1]][1]
} else {
if (grepl(pattern = "(",x = CompoundsPP_All[[counter]][[1]][2],fixed = T)) {
CompoundsPP_Names[[counter]] <- CompoundsPP_All[[counter]][[1]][1]
} else {
CompoundsPP_Names[[counter]] <- paste0(CompoundsPP_All[[counter]][[1]][1],"_",CompoundsPP_All[[counter]][[1]][2])
}
}
}
CompoundsPP_Names <- unlist(CompoundsPP_Names)
Compounds <- t(read.table(file = "~/Desktop/RWTH_Aachen/GitHub/CARNIVAL/archive/CARNIVAL_Validation/E-MTAB-2091/data/All_Compound_Names.tsv",sep = "\r"))
ValResMat <- as.data.frame(matrix(NA,length(Compounds),length(MeasuredPP)*3))
ValResMatCol <- NULL
for (counter in 1:length(MeasuredPP)) {
ValResMatCol <- c(ValResMatCol,paste0(MeasuredPP[counter],"_Mod"),paste0(MeasuredPP[counter],"_5m"),paste0(MeasuredPP[counter],"_25m"))
}
colnames(ValResMat) <- ValResMatCol
rownames(ValResMat) <- Compounds
ValResMatSign <- ValResMat
CutOff <- 0.1
ValResMatSignCutOff <- ValResMat
Compounds
counter_compound=23
print(paste0("Now mapping: ",Compounds[counter_compound]))
file.exists(paste0("~/Desktop/RWTH_Aachen/GitHub/CARNIVAL/results/validation_",Compounds[counter_compound],"_generic/nodesActivity_1.txt"))
setwd("~/Desktop/RWTH_Aachen/GitHub/CARNIVAL")
rm(list=ls()) # clear environment
cat("\014") # clear screen
Compounds <- t(read.table(file = "~/Desktop/RWTH_Aachen/GitHub/CARNIVAL/archive/CARNIVAL_Validation/E-MTAB-2091/data/All_Compound_Names.tsv",sep = "\r"))
ScaffoldNet <- c(1,4) # c(1,2,3,4) # Model2 [Signor] has an issue with writeSIF and Model3 [Babur] is too large to write constraints
ScaffoldName <- c("omnipath","signor","babur","generic")
Export_all <- 0 # c(0,1) export all ILP variables or not; if 0, only cplex results, predicted node values and sif file will be written
for (counter_compound in 23:length(Compounds)) {
for (counter_network in 1:length(ScaffoldNet)) {
Network <- ScaffoldNet[counter_network]
NetName <- ScaffoldName[ScaffoldNet[counter_network]]
Result_dir <- paste0(Compounds[counter_compound],"_",NetName) # specify a name for result directory; if NULL, then date and time will be used by default
# ============================== #
# Load necessary packages and functions
library(readr)
library(tidyr)
library(XML)
source("src/CRILPR_Functions.R")
# Create a directory to store results
current_dir <- getwd()
dir.create("results",showWarnings = FALSE)
setwd(paste(current_dir,"/results",sep=""))
if (is.null(Result_dir)) {
dir_name <- paste("results_",Sys.time(),sep="")
} else {
dir_name <- paste0("validation_",Result_dir)
}
dir.create(dir_name); setwd(current_dir)
# Load ILP inputs
if (Network==1) {
network      <- read.table("archive/CARNIVAL_Validation/E-MTAB-2091/network/OmniPathSIF_NoHyphen.tsv", sep = "\t", header = FALSE)
} else if (Network==2) {
network      <- read.delim("archive/CARNIVAL_Validation/E-MTAB-2091/network/SignorSIF_NoHyphenNoSlashNoColon.tsv", sep = "\t", header = FALSE)
} else if (Network==3) {
network      <- read.table("archive/CARNIVAL_Validation/E-MTAB-2091/network/BaburSIF_NoHyphen.tsv", sep = "\t", header = FALSE)
} else if (Network==4) {
network      <- read.table("archive/CARNIVAL_Validation/E-MTAB-2091/network/Network_Generic_FIN_RemovedTFGenes_NoHyphen.sif", sep = "\t", header = FALSE)
} else {
stop("Please choose the provided model scaffolds")
}
inputs       <- read.table(paste0("archive/CARNIVAL_Validation/E-MTAB-2091/annotation/DrugTarget_",Compounds[counter_compound],"_plusPROGENy_CutOff_50.tsv"), sep="\t", header = TRUE)
measurements <- read_delim(paste0("archive/CARNIVAL_Validation/E-MTAB-2091/data/Dorothea_",Compounds[counter_compound],"_Cutoff_1.tsv"), "\t", escape_double = FALSE, trim_ws = TRUE)
# Input processing
data <- measurements
pknList <- as.data.frame(network)
colnames(pknList) <- c("Node1", "Sign", "Node2")
setwd(paste0(current_dir,"/src/")) # temporary shift to src directory
# Write constraints as ILP inputs
ptm <- proc.time()
variables <- writeLPFile(data,pknList,inputs,0.1)
Elapsed_1 <- proc.time() - ptm
# Solve ILP problem with cplex, remove temp files, and return to the main directory
ptm <- proc.time()
system(paste0(getwd(), "/cplex -f cplexCommand.txt"))
Elapsed_2 <- proc.time() - ptm
# file.remove("testFile.lp")
file.remove("cplex.log")
file.copy(from = "results_cplex.txt",to = paste(current_dir,"/results/",dir_name,"/results_cplex.txt",sep=""))
file.remove("results_cplex.txt")
setwd(current_dir)
# Write result files
ptm <- proc.time()
if (file.exists(paste("results/",dir_name,"/results_cplex.txt",sep=""))) {
for(i in 1:length(variables)){
sif <- readOutResult(cplexSolutionFileName = paste("results/",dir_name,"/results_cplex.txt",sep=""), variables = variables, pknList = pknList, conditionIDX = i,dir_name = dir_name, Export_all = Export_all)
}
} else {
print("No result to be written")
}
Elapsed_3 <- proc.time() - ptm
# Logged computational time
ElapsedAll <- as.data.frame(matrix(t(c(Elapsed_1[3],Elapsed_2[3],Elapsed_3[3])),3,1))
rownames(ElapsedAll) <- c("WriteConstraints:","CplexSolving:","ExportResults:")
write.table(x = ElapsedAll,file = paste("results/",dir_name,"/elapsed_time.txt",sep=""),col.names = F,row.names = T,quote = F)
}
}
setwd("~/Desktop/RWTH_Aachen/GitHub/CARNIVAL")
rm(list=ls()) # clear environment
cat("\014") # clear screen
setwd("~/Desktop/RWTH_Aachen/GitHub/CARNIVAL")
rm(list=ls()) # clear environment
cat("\014") # clear screen
Compounds <- t(read.table(file = "~/Desktop/RWTH_Aachen/GitHub/CARNIVAL/archive/CARNIVAL_Validation/E-MTAB-2091/data/All_Compound_Names.tsv",sep = "\r"))
ScaffoldNet <- c(1,4) # c(1,2,3,4) # Model2 [Signor] has an issue with writeSIF and Model3 [Babur] is too large to write constraints
ScaffoldName <- c("omnipath","signor","babur","generic")
Export_all <- 0 # c(0,1) export all ILP variables or not; if 0, only cplex results, predicted node values and sif file will be written
Compounds
setwd("~/Desktop/RWTH_Aachen/GitHub/CARNIVAL")
rm(list=ls()) # clear environment
cat("\014") # clear screen
Compounds <- t(read.table(file = "~/Desktop/RWTH_Aachen/GitHub/CARNIVAL/archive/CARNIVAL_Validation/E-MTAB-2091/data/All_Compound_Names.tsv",sep = "\r"))
ScaffoldNet <- c(1,4) # c(1,2,3,4) # Model2 [Signor] has an issue with writeSIF and Model3 [Babur] is too large to write constraints
ScaffoldName <- c("omnipath","signor","babur","generic")
Export_all <- 0 # c(0,1) export all ILP variables or not; if 0, only cplex results, predicted node values and sif file will be written
setwd("~/Desktop/RWTH_Aachen/GitHub/CARNIVAL")
rm(list=ls()) # clear environment
cat("\014") # clear screen
Compounds <- t(read.table(file = "~/Desktop/RWTH_Aachen/GitHub/CARNIVAL/archive/CARNIVAL_Validation/E-MTAB-2091/data/All_Compound_Names.tsv",sep = "\r"))
ScaffoldNet <- c(1,4) # c(1,2,3,4) # Model2 [Signor] has an issue with writeSIF and Model3 [Babur] is too large to write constraints
ScaffoldName <- c("omnipath","signor","babur","generic")
InputType <- 2 # [1,2] 1 = Direct targets plus PROGENy; 2 = Only Direct targets; 3 = Direct targets plus STRING
Export_all <- 0 # c(0,1) export all ILP variables or not; if 0, only cplex results, predicted node values and sif file will be written
print(paste0("Optimising compound: ",Compounds[counter_compound]," - Using network: ",ScaffoldName[counter_network]))
setwd("~/Desktop/RWTH_Aachen/GitHub/CARNIVAL")
rm(list=ls()) # clear environment
cat("\014") # clear screen
Compounds <- t(read.table(file = "~/Desktop/RWTH_Aachen/GitHub/CARNIVAL/archive/CARNIVAL_Validation/E-MTAB-2091/data/All_Compound_Names.tsv",sep = "\r"))
ScaffoldNet <- c(1,4) # c(1,2,3,4) # Model2 [Signor] has an issue with writeSIF and Model3 [Babur] is too large to write constraints
ScaffoldName <- c("omnipath","signor","babur","generic")
InputType <- 2 # [1,2] 1 = Direct targets plus PROGENy; 2 = Only Direct targets; 3 = Direct targets plus STRING
Export_all <- 0 # c(0,1) export all ILP variables or not; if 0, only cplex results, predicted node values and sif file will be written
for (counter_compound in 3:3) {
for (counter_network in 1:length(ScaffoldNet)) {
print(paste0("Optimising compound: ",Compounds[counter_compound]," - Using network: ",ScaffoldName[counter_network]))
Network <- ScaffoldNet[counter_network]
NetName <- ScaffoldName[ScaffoldNet[counter_network]]
Result_dir <- paste0(Compounds[counter_compound],"_",NetName) # specify a name for result directory; if NULL, then date and time will be used by default
# ============================== #
# Load necessary packages and functions
library(readr)
library(tidyr)
library(XML)
source("src/CRILPR_Functions.R")
# Create a directory to store results
current_dir <- getwd()
dir.create("results",showWarnings = FALSE)
setwd(paste(current_dir,"/results",sep=""))
if (is.null(Result_dir)) {
dir_name <- paste("results_",Sys.time(),sep="")
} else {
if (InputType==1) {
dir_name <- paste0("validation_",Result_dir)
} else if (InputType==2) {
dir_name <- paste0("validation_",Result_dir,"_MainTarget")
}
}
dir.create(dir_name); setwd(current_dir)
# Load ILP inputs
if (Network==1) {
network      <- read.table("archive/CARNIVAL_Validation/E-MTAB-2091/network/OmniPathSIF_NoHyphen.tsv", sep = "\t", header = FALSE)
} else if (Network==2) {
network      <- read.delim("archive/CARNIVAL_Validation/E-MTAB-2091/network/SignorSIF_NoHyphenNoSlashNoColon.tsv", sep = "\t", header = FALSE)
} else if (Network==3) {
network      <- read.table("archive/CARNIVAL_Validation/E-MTAB-2091/network/BaburSIF_NoHyphen.tsv", sep = "\t", header = FALSE)
} else if (Network==4) {
network      <- read.table("archive/CARNIVAL_Validation/E-MTAB-2091/network/Network_Generic_FIN_RemovedTFGenes_NoHyphen.sif", sep = "\t", header = FALSE)
} else {
stop("Please choose the provided model scaffolds")
}
if (InputType==1) {
inputs       <- read.table(paste0("archive/CARNIVAL_Validation/E-MTAB-2091/annotation/DrugTarget_",Compounds[counter_compound],"_plusPROGENy_CutOff_50.tsv"), sep="\t", header = TRUE)
} else if (InputType==2) {
inputs       <- read.table(paste0("archive/CARNIVAL_Validation/E-MTAB-2091/annotation/DrugTarget_",Compounds[counter_compound],".tsv"), sep="\t", header = TRUE)
}
measurements <- read_delim(paste0("archive/CARNIVAL_Validation/E-MTAB-2091/data/Dorothea_",Compounds[counter_compound],"_Cutoff_1.tsv"), "\t", escape_double = FALSE, trim_ws = TRUE)
# Input processing
data <- measurements
pknList <- as.data.frame(network)
colnames(pknList) <- c("Node1", "Sign", "Node2")
setwd(paste0(current_dir,"/src/")) # temporary shift to src directory
# Write constraints as ILP inputs
ptm <- proc.time()
variables <- writeLPFile(data,pknList,inputs,0.1)
Elapsed_1 <- proc.time() - ptm
# Solve ILP problem with cplex, remove temp files, and return to the main directory
ptm <- proc.time()
system(paste0(getwd(), "/cplex -f cplexCommand.txt"))
Elapsed_2 <- proc.time() - ptm
# file.remove("testFile.lp")
file.remove("cplex.log")
file.copy(from = "results_cplex.txt",to = paste(current_dir,"/results/",dir_name,"/results_cplex.txt",sep=""))
file.remove("results_cplex.txt")
setwd(current_dir)
# Write result files
ptm <- proc.time()
if (file.exists(paste("results/",dir_name,"/results_cplex.txt",sep=""))) {
for(i in 1:length(variables)){
sif <- readOutResult(cplexSolutionFileName = paste("results/",dir_name,"/results_cplex.txt",sep=""), variables = variables, pknList = pknList, conditionIDX = i,dir_name = dir_name, Export_all = Export_all)
}
} else {
print("No result to be written")
}
Elapsed_3 <- proc.time() - ptm
# Logged computational time
ElapsedAll <- as.data.frame(matrix(t(c(Elapsed_1[3],Elapsed_2[3],Elapsed_3[3])),3,1))
rownames(ElapsedAll) <- c("WriteConstraints:","CplexSolving:","ExportResults:")
write.table(x = ElapsedAll,file = paste("results/",dir_name,"/elapsed_time.txt",sep=""),col.names = F,row.names = T,quote = F)
}
}
setwd("~/Desktop/RWTH_Aachen/GitHub/CARNIVAL")
rm(list=ls()) # clear environment
cat("\014") # clear screen
Compounds <- t(read.table(file = "~/Desktop/RWTH_Aachen/GitHub/CARNIVAL/archive/CARNIVAL_Validation/E-MTAB-2091/data/All_Compound_Names.tsv",sep = "\r"))
ScaffoldNet <- c(1,4) # c(1,2,3,4) # Model2 [Signor] has an issue with writeSIF and Model3 [Babur] is too large to write constraints
ScaffoldName <- c("omnipath","signor","babur","generic")
InputType <- 2 # [1,2] 1 = Direct targets plus PROGENy; 2 = Only Direct targets; 3 = Direct targets plus STRING
Export_all <- 0 # c(0,1) export all ILP variables or not; if 0, only cplex results, predicted node values and sif file will be written
for (counter_compound in 9:10) {
for (counter_network in 1:length(ScaffoldNet)) {
print(paste0("Optimising compound: ",Compounds[counter_compound]," - Using network: ",ScaffoldName[counter_network]))
Network <- ScaffoldNet[counter_network]
NetName <- ScaffoldName[ScaffoldNet[counter_network]]
Result_dir <- paste0(Compounds[counter_compound],"_",NetName) # specify a name for result directory; if NULL, then date and time will be used by default
# ============================== #
# Load necessary packages and functions
library(readr)
library(tidyr)
library(XML)
source("src/CRILPR_Functions.R")
# Create a directory to store results
current_dir <- getwd()
dir.create("results",showWarnings = FALSE)
setwd(paste(current_dir,"/results",sep=""))
if (is.null(Result_dir)) {
dir_name <- paste("results_",Sys.time(),sep="")
} else {
if (InputType==1) {
dir_name <- paste0("validation_",Result_dir)
} else if (InputType==2) {
dir_name <- paste0("validation_",Result_dir,"_MainTarget")
}
}
dir.create(dir_name); setwd(current_dir)
# Load ILP inputs
if (Network==1) {
network      <- read.table("archive/CARNIVAL_Validation/E-MTAB-2091/network/OmniPathSIF_NoHyphen.tsv", sep = "\t", header = FALSE)
} else if (Network==2) {
network      <- read.delim("archive/CARNIVAL_Validation/E-MTAB-2091/network/SignorSIF_NoHyphenNoSlashNoColon.tsv", sep = "\t", header = FALSE)
} else if (Network==3) {
network      <- read.table("archive/CARNIVAL_Validation/E-MTAB-2091/network/BaburSIF_NoHyphen.tsv", sep = "\t", header = FALSE)
} else if (Network==4) {
network      <- read.table("archive/CARNIVAL_Validation/E-MTAB-2091/network/Network_Generic_FIN_RemovedTFGenes_NoHyphen.sif", sep = "\t", header = FALSE)
} else {
stop("Please choose the provided model scaffolds")
}
if (InputType==1) {
inputs       <- try(read.table(paste0("archive/CARNIVAL_Validation/E-MTAB-2091/annotation/DrugTarget_",Compounds[counter_compound],"_plusPROGENy_CutOff_50.tsv"), sep="\t", header = TRUE))
if(inherits(inputs, "try-error")) next
} else if (InputType==2) {
inputs       <- try(read.table(paste0("archive/CARNIVAL_Validation/E-MTAB-2091/annotation/DrugTarget_",Compounds[counter_compound],".tsv"), sep="\t", header = TRUE))
if(inherits(inputs, "try-error")) next
}
measurements <- read_delim(paste0("archive/CARNIVAL_Validation/E-MTAB-2091/data/Dorothea_",Compounds[counter_compound],"_Cutoff_1.tsv"), "\t", escape_double = FALSE, trim_ws = TRUE)
# Input processing
data <- measurements
pknList <- as.data.frame(network)
colnames(pknList) <- c("Node1", "Sign", "Node2")
setwd(paste0(current_dir,"/src/")) # temporary shift to src directory
# Write constraints as ILP inputs
ptm <- proc.time()
variables <- writeLPFile(data,pknList,inputs,0.1)
Elapsed_1 <- proc.time() - ptm
# Solve ILP problem with cplex, remove temp files, and return to the main directory
ptm <- proc.time()
system(paste0(getwd(), "/cplex -f cplexCommand.txt"))
Elapsed_2 <- proc.time() - ptm
# file.remove("testFile.lp")
file.remove("cplex.log")
file.copy(from = "results_cplex.txt",to = paste(current_dir,"/results/",dir_name,"/results_cplex.txt",sep=""))
file.remove("results_cplex.txt")
setwd(current_dir)
# Write result files
ptm <- proc.time()
if (file.exists(paste("results/",dir_name,"/results_cplex.txt",sep=""))) {
for(i in 1:length(variables)){
sif <- readOutResult(cplexSolutionFileName = paste("results/",dir_name,"/results_cplex.txt",sep=""), variables = variables, pknList = pknList, conditionIDX = i,dir_name = dir_name, Export_all = Export_all)
}
} else {
print("No result to be written")
}
Elapsed_3 <- proc.time() - ptm
# Logged computational time
ElapsedAll <- as.data.frame(matrix(t(c(Elapsed_1[3],Elapsed_2[3],Elapsed_3[3])),3,1))
rownames(ElapsedAll) <- c("WriteConstraints:","CplexSolving:","ExportResults:")
write.table(x = ElapsedAll,file = paste("results/",dir_name,"/elapsed_time.txt",sep=""),col.names = F,row.names = T,quote = F)
}
}
Compounds
print(paste0("Optimising compound Nr ", toString(counter_compound),"/",toString(length(Compounds))," : " ,Compounds[counter_compound]," - Using network: ",ScaffoldName[counter_network]))
# ---------------------- #
# CARNIVAL driver script #
# ---------------------- #
# Systematic pipeline for validation dataset (E-MTAB-2091)
setwd("~/Desktop/RWTH_Aachen/GitHub/CARNIVAL")
rm(list=ls()) # clear environment
cat("\014") # clear screen
Compounds <- t(read.table(file = "~/Desktop/RWTH_Aachen/GitHub/CARNIVAL/archive/CARNIVAL_Validation/E-MTAB-2091/data/All_Compound_Names.tsv",sep = "\r"))
ScaffoldNet <- c(1,4) # c(1,2,3,4) # Model2 [Signor] has an issue with writeSIF and Model3 [Babur] is too large to write constraints
ScaffoldName <- c("omnipath","signor","babur","generic")
InputType <- 2 # [1,2] 1 = Direct targets plus PROGENy; 2 = Only Direct targets; 3 = Direct targets plus STRING
Export_all <- 0 # c(0,1) export all ILP variables or not; if 0, only cplex results, predicted node values and sif file will be written
# for (counter_compound in 1:length(Compounds)) {
for (counter_compound in 9:10) {
for (counter_network in 1:length(ScaffoldNet)) {
print(paste0("Optimising compound Nr ", toString(counter_compound),"/",toString(length(Compounds))," : " ,Compounds[counter_compound]," - Using network: ",ScaffoldName[counter_network]))
Network <- ScaffoldNet[counter_network]
NetName <- ScaffoldName[ScaffoldNet[counter_network]]
Result_dir <- paste0(Compounds[counter_compound],"_",NetName) # specify a name for result directory; if NULL, then date and time will be used by default
# ============================== #
# Load necessary packages and functions
library(readr)
library(tidyr)
library(XML)
source("src/CRILPR_Functions.R")
# Create a directory to store results
current_dir <- getwd()
dir.create("results",showWarnings = FALSE)
setwd(paste(current_dir,"/results",sep=""))
if (is.null(Result_dir)) {
dir_name <- paste("results_",Sys.time(),sep="")
} else {
if (InputType==1) {
dir_name <- paste0("validation_",Result_dir)
} else if (InputType==2) {
dir_name <- paste0("validation_",Result_dir,"_MainTarget")
}
}
dir.create(dir_name); setwd(current_dir)
# Load ILP inputs
if (Network==1) {
network      <- read.table("archive/CARNIVAL_Validation/E-MTAB-2091/network/OmniPathSIF_NoHyphen.tsv", sep = "\t", header = FALSE)
} else if (Network==2) {
network      <- read.delim("archive/CARNIVAL_Validation/E-MTAB-2091/network/SignorSIF_NoHyphenNoSlashNoColon.tsv", sep = "\t", header = FALSE)
} else if (Network==3) {
network      <- read.table("archive/CARNIVAL_Validation/E-MTAB-2091/network/BaburSIF_NoHyphen.tsv", sep = "\t", header = FALSE)
} else if (Network==4) {
network      <- read.table("archive/CARNIVAL_Validation/E-MTAB-2091/network/Network_Generic_FIN_RemovedTFGenes_NoHyphen.sif", sep = "\t", header = FALSE)
} else {
stop("Please choose the provided model scaffolds")
}
if (InputType==1) {
inputs       <- try(read.table(paste0("archive/CARNIVAL_Validation/E-MTAB-2091/annotation/DrugTarget_",Compounds[counter_compound],"_plusPROGENy_CutOff_50.tsv"), sep="\t", header = TRUE))
if(inherits(inputs, "try-error")) next
} else if (InputType==2) {
inputs       <- try(read.table(paste0("archive/CARNIVAL_Validation/E-MTAB-2091/annotation/DrugTarget_",Compounds[counter_compound],".tsv"), sep="\t", header = TRUE))
if(inherits(inputs, "try-error")) next
}
measurements <- read_delim(paste0("archive/CARNIVAL_Validation/E-MTAB-2091/data/Dorothea_",Compounds[counter_compound],"_Cutoff_1.tsv"), "\t", escape_double = FALSE, trim_ws = TRUE)
# Input processing
data <- measurements
pknList <- as.data.frame(network)
colnames(pknList) <- c("Node1", "Sign", "Node2")
setwd(paste0(current_dir,"/src/")) # temporary shift to src directory
# Write constraints as ILP inputs
ptm <- proc.time()
variables <- writeLPFile(data,pknList,inputs,0.1)
Elapsed_1 <- proc.time() - ptm
# Solve ILP problem with cplex, remove temp files, and return to the main directory
ptm <- proc.time()
system(paste0(getwd(), "/cplex -f cplexCommand.txt"))
Elapsed_2 <- proc.time() - ptm
# file.remove("testFile.lp")
file.remove("cplex.log")
file.copy(from = "results_cplex.txt",to = paste(current_dir,"/results/",dir_name,"/results_cplex.txt",sep=""))
file.remove("results_cplex.txt")
setwd(current_dir)
# Write result files
ptm <- proc.time()
if (file.exists(paste("results/",dir_name,"/results_cplex.txt",sep=""))) {
for(i in 1:length(variables)){
sif <- readOutResult(cplexSolutionFileName = paste("results/",dir_name,"/results_cplex.txt",sep=""), variables = variables, pknList = pknList, conditionIDX = i,dir_name = dir_name, Export_all = Export_all)
}
} else {
print("No result to be written")
}
Elapsed_3 <- proc.time() - ptm
# Logged computational time
ElapsedAll <- as.data.frame(matrix(t(c(Elapsed_1[3],Elapsed_2[3],Elapsed_3[3])),3,1))
rownames(ElapsedAll) <- c("WriteConstraints:","CplexSolving:","ExportResults:")
write.table(x = ElapsedAll,file = paste("results/",dir_name,"/elapsed_time.txt",sep=""),col.names = F,row.names = T,quote = F)
}
}
