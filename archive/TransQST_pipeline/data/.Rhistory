io = import('io')
ma = import('process/microarray')
rm(list=ls()); cat('\014'); if (length(dev.list()>0)) {dev.off()}
rm(list=ls()); cat('\014'); if (length(dev.list()>0)) {dev.off()}
setwd('~/Desktop/RWTH_Aachen/GitHub/ebits/')
source("https://bioconductor.org/biocLite.R")
source("ebits_installation_script.R")
BiocInstaller::biocLite('narray')
BiocInstaller::biocLite('rhdf5')
ma = import('process/microarray')
source('~/Desktop/RWTH_Aachen/GitHub/ebits/ebits_installation_script.R', echo=TRUE)
ma = import('process/microarray')
rm(list=ls()); cat('\014'); if (length(dev.list()>0)) {dev.off()}
rm(list=ls()); cat('\014'); if (length(dev.list()>0)) {dev.off()}
setwd('~/Desktop/RWTH_Aachen/GitHub/ebits/')
source("https://bioconductor.org/biocLite.R")
source("ebits_installation_script.R")
library(modules)
library(oligo)
library(matrixStats)
library(io)
library(gplots)
library(RColorBrewer)
b = import('base')
io = import('io')
ma = import('process/microarray')
idmap = import('process/idmap')
library(rhdf5)
ma = import('process/microarray')
library(narray)
library(rhdf5)
ma = import('process/microarray')
BiocInstaller::biocLite('narray')
BiocInstaller::biocLite('rhdf5')
rm(list=ls()); cat('\014'); if (length(dev.list()>0)) {dev.off()}
setwd('~/Desktop/RWTH_Aachen/GitHub/ebits/')
source("https://bioconductor.org/biocLite.R")
source("ebits_installation_script.R")
library(modules)
library(oligo)
library(matrixStats)
library(io)
library(gplots)
library(RColorBrewer)
b = import('base')
io = import('io')
ma = import('process/microarray')
idmap = import('process/idmap')
ma = import('process/microarray')
idmap = import('process/idmap')
setwd('~/Desktop/RWTH_Aachen/GitHub/CARNIVAL_TransQST/data')
dir = '~/Desktop/RWTH_Aachen/GitHub/Raw_Data/APAP/acetaminophen.Human.in_vitro.Liver/celfiles' # APAP In vitro Human
celfiles = list.files(dir, pattern= '.CEL', full.names = TRUE)
rawData = read.celfiles(celfiles)
expr = ma$qc(rawData) %>%
ma$normalize() %>%
ma$annotate(summarize='hgnc_symbol')
biolite(hgu133plus.db)
bioclite(hgu133plus.db)
biocLite("hgu133plus.db)
biocLite("hgu133plus.db")
source("https://bioconductor.org/biocLite.R")
biocLite("hgu133plus.db")
load(file = "Expr_TG-GATEs_APAP_in_vitro_human.Rdata")
rm(list=ls()); cat('\014'); if (length(dev.list()>0)) {dev.off()}
setwd('~/Desktop/RWTH_Aachen/GitHub/CARNIVAL_TransQST/data')
load(file = "Expr_TG-GATEs_APAP_in_vitro_human.Rdata")
source('lib_enrichment_scores.r')
load('CTFRs_v122016.rdata')
load('Expr_TG-GATEs_APAP_in_vitro_human.Rdata') # APAP human in vitro (liver)
eset <- expr
expr <- exprs(eset)
library(matrixStats)
m = rowMeans2(as.matrix(expr))
s = rowSds(as.matrix(expr))
expr_z_score = t(scale(t(as.matrix(expr)), center = m, scale=s))
E = expr_z_score
TF_activities = SLEA(E = E, genesets = CTFRs_genesets, method = 'VIPER')$NES # Worked -> get positive and negative values (min/max ~ -3/3, z-score?)
save(TF_activities,file = "TF_activities_VIPER_TG-GATEs_APAP_in_vitro_human.Rdata")
ILP_absolute_cutoff <- 2.0 # Choose cut-off value for discretisation
Drug_TF <- as.data.frame(t(rowMeans(TF_activities[,15:16]))) # 2h Low
Drug_TF_ILP <- Drug_TF
Drug_TF_ILP[Drug_TF >= ILP_absolute_cutoff] <- 1
Drug_TF_ILP[Drug_TF <= -1*ILP_absolute_cutoff] <- -1
ToRemoveIdx <- which(Drug_TF < ILP_absolute_cutoff & Drug_TF > -1*ILP_absolute_cutoff)
Drug_TF_ILP <- Drug_TF_ILP[-ToRemoveIdx]
Drug_TF_ILP
View(TF_activities)
source('calc_progeny_score.R')
Compound_Names <- c("APAP","CISP","AZA","CCl4","DEM","DFN","ETO","LPS","TNFa","TUNI")
Compound <- Compound_Names[1]
Rat  <- FALSE
InVivo <- FALSE
Repeat <- FALSE
scaling <- TRUE
load('Progeny_model.RData') # Load progeny model as "model"
if (!InVivo) {
Time_Points <- c(2,8,24) # hrs
if (!Rat) {
PrefixLength <- 16 + nchar(Compound) # DRUG_in_vitro_human_
} else {
PrefixLength <- 14 + nchar(Compound) # DRUG_in_vitro_rat_
}
} else {
if (!Repeat) {
Time_Points <- c(3,6,9,24) # hrs
PrefixLength <- 20 + nchar(Compound) # DRUG_in_vivo_rat_single_
} else {
Time_Points <- c(4,8,15,29) # days
PrefixLength <- 20 + nchar(Compound) # DRUG_in_vivo_rat_repeat_
}
}
source('calc_progeny_score.R')
All_Progeny_Score <- NULL
for (counter in 1:length(Time_Points)) {
if (!Repeat) {
Current_TimePoints <- paste(toString(Time_Points[counter]),'h',sep="")
} else {
Current_TimePoints <- paste(toString(Time_Points[counter]),'d',sep="")
}
Current_Exps <- which(grepl(Current_TimePoints,colnames(expr)))
Current_Expr <- expr[,Current_Exps]
Current_Ctrl <- which(grepl("ctrl",colnames(Current_Expr),fixed=TRUE))
Progeny_Score <- calc_progeny_score(Current_Expr,Current_Ctrl,model,scaling)
# print(Progeny_Score)
# Calculate the mean from biological relicates
Mean_Progeny <- matrix(NA,4,dim(Progeny_Score)[2]) # 4 <- 1 ctrl + 3 doses (low, mid, high)
colnames(Mean_Progeny) <- colnames(Progeny_Score)
i <- 1
j <- 1
RowNamesCollection <- NULL
while (i < dim(Progeny_Score)[1]+1) {
NameCheck <- substr(rownames(Progeny_Score[i,]),1,nchar(rownames(Progeny_Score[i,]))-5)
RepCheck  <- which(grepl(NameCheck,rownames(Progeny_Score),fixed=TRUE))
MeanScore <- colMeans(Progeny_Score[RepCheck,])
Mean_Progeny[j,] <- MeanScore
NamePrint <- substr(NameCheck,PrefixLength+1,nchar(NameCheck)-4)
RowNamesCollection <- c(RowNamesCollection,NamePrint)
i <- i+length(RepCheck)
j <- j+1
}
rownames(Mean_Progeny) <- RowNamesCollection
Mean_Progeny[abs(Mean_Progeny)<1e-10] <- 0 # Push near zero value to absolute 0
Mean_Progeny <- Mean_Progeny[-grep("ctrl",rownames(Mean_Progeny),fixed=TRUE),]
All_Progeny_Score <- rbind(All_Progeny_Score,Mean_Progeny)
# print(All_Progeny_Score)
}
All_Progeny_Score
View(TF_activities)
View(Drug_TF)
View(Drug_TF_ILP)
View(TF_activities)
ILP_absolute_cutoff <- 2.0 # Choose cut-off value for discretisation
TF_activities <- t(TF_activities)
View(TF_activities)
TF_act_ILP <- matrix(NA,nrow(TF_activities/2),col(TF_activities))
View(TF_act_ILP)
TF_act_ILP <- matrix(NA,nrow(TF_activities/2),ncol(TF_activities))
TF_act_ILP <- matrix(NA,nrow(TF_activities)/2,ncol(TF_activities))
TF_act_ILP <- matrix(NA,nrow(TF_activities)/2,ncol(TF_activities))
for (counter in 1:(nrow(TF_activities)/2)) {
TF_act_ILP[counter] <- rowMeans(TF_activities[,(((counter-1)*2)+1):(((counter-1)*2)+2)])
}
View(TF_activities)
View(TF_act_ILP)
TF_act_ILP[counter] <- colMeans(TF_activities[(((counter-1)*2)+1):(((counter-1)*2)+2),])
TF_activities[(((counter-1)*2)+1):(((counter-1)*2)+2)
]
TF_activities[(((counter-1)*2)+1):(((counter-1)*2)+2),]
colMeans(TF_activities[(((counter-1)*2)+1):(((counter-1)*2)+2),])
nrow(TF_activities)/2
for (counter in 1:(nrow(TF_activities)/2)) {
TF_act_ILP[counter] <- colMeans(TF_activities[(((counter-1)*2)+1):(((counter-1)*2)+2),])
}
View(TF_act_ILP)
TF_act_ILP <- matrix(NA,nrow(TF_activities)/2,ncol(TF_activities))
View(TF_act_ILP)
1:(nrow(TF_activities)/2)
counter=1
for (counter in 1:(nrow(TF_activities)/2)) {
TF_act_ILP[counter,] <- colMeans(TF_activities[(((counter-1)*2)+1):(((counter-1)*2)+2),])
}
View(TF_act_ILP)
View(All_Progeny_Score)
seq(0,10,by=2)
seq(1,24,by=2)
rownames(TF_act_ILP) <- rownames(TF_activities[seq(1,nrow(TF_activities),by=2)])
View(TF_act_ILP)
TF_activities
rownames(TF_act_ILP) <- rownames(TF_activities)[seq(1,nrow(TF_activities),by=2)]
View(TF_act_ILP)
rownames(TF_act_ILP) <- substring(rownames(TF_activities)[seq(1,nrow(TF_activities),by=2)],1,14)
View(TF_act_ILP)
TF_act_ILP <- matrix(NA,nrow(TF_activities)/2,ncol(TF_activities))
counter=1
TF_act_ILP[counter,] <- colMeans(TF_activities[(((counter-1)*2)+1):(((counter-1)*2)+2),])
rownames(TF_activities)[((counter-1)*2)+1]
nchar(rownames(TF_activities)[((counter-1)*2)+1])
rownames(TF_act_ILP)[counter] <- substring(rownames(TF_activities)[((counter-1)*2)+1],15,nchar(rownames(TF_activities)[((counter-1)*2)+1])-9)
rownames(TF_activities)[((counter-1)*2)+1]
nchar(rownames(TF_activities)[((counter-1)*2)+1])-9
rownames(TF_act_ILP)[counter]
TF_act_IL:
P
TF_act_ILP
substring(rownames(TF_activities)[((counter-1)*2)+1],15,nchar(rownames(TF_activities)[((counter-1)*2)+1])-9)
TF_act_ILP <- matrix(NA,nrow(TF_activities)/2,ncol(TF_activities))
for (counter in 1:(nrow(TF_activities)/2)) {
TF_act_ILP[counter,] <- colMeans(TF_activities[(((counter-1)*2)+1):(((counter-1)*2)+2),])
rownames(TF_act_ILP)[counter] <- substring(rownames(TF_activities)[((counter-1)*2)+1],20,nchar(rownames(TF_activities)[((counter-1)*2)+1])-9)
}
substring(rownames(TF_activities)[((counter-1)*2)+1],20,nchar(rownames(TF_activities)[((counter-1)*2)+1])-9)
counter
TF_act_ILP <- matrix(NA,nrow(TF_activities)/2,ncol(TF_activities))
for (counter in 1:(nrow(TF_activities)/2)) {
TF_act_ILP[counter,] <- colMeans(TF_activities[(((counter-1)*2)+1):(((counter-1)*2)+2),])
rownames(TF_act_ILP)[counter] <- substring(rownames(TF_activities)[((counter-1)*2)+1],21,nchar(rownames(TF_activities)[((counter-1)*2)+1])-9)
}
rownames(TF_act_ILP)
TF_act_ILP <- matrix(NA,nrow(TF_activities)/2,ncol(TF_activities))
RowNames_ILP <- NULL
for (counter in 1:(nrow(TF_activities)/2)) {
TF_act_ILP[counter,] <- colMeans(TF_activities[(((counter-1)*2)+1):(((counter-1)*2)+2),])
}
for (counter in 1:(nrow(TF_activities)/2)) {
TF_act_ILP[counter,] <- colMeans(TF_activities[(((counter-1)*2)+1):(((counter-1)*2)+2),])
RowNames_ILP <- c(RowNames_ILP,substring(rownames(TF_activities)[((counter-1)*2)+1],21,nchar(rownames(TF_activities)[((counter-1)*2)+1])-9))
}
RowNames_ILP
rownames(TF_act_ILP) <- RowNames_ILP
View(TF_act_ILP)
rownames(TF_act_ILP) <- RowNames_ILP; colnames(TF_act_ILP) <- colnames(TF_activities)
View(TF_act_ILP)
View(Progeny_Score)
View(All_Progeny_Score)
TF_act_ILP
m = colMeans2(as.matrix(TF_act_ILP))
s = colSds(as.matrix(TF_act_ILP))
m
s
TF_act_ILP_z_score = t(scale(t(as.matrix(TF_act_ILP)), center = m, scale=s))
length(m)
length(s)
TF_act_ILP_z_score = t(scale(as.matrix(TF_act_ILP)), center = m, scale=s))
TF_act_ILP_z_score = t(scale(as.matrix(TF_act_ILP), center = m, scale=s))
View(TF_act_ILP_z_score)
TF_act_ILP_z_score = scale(as.matrix(TF_act_ILP), center = m, scale=s)
View(TF_activities)
View(TF_act_ILP_z_score)
m = colMeans2(as.matrix(All_Progeny_Score))
s = colSds(as.matrix(All_Progeny_Score))
PW_act_ILP_z_score = scale(as.matrix(All_Progeny_Score), center = m, scale=s)
View(PW_act_ILP_z_score)
View(PW_act_ILP_z_score)
DRT_Idx <- which(rownames(TF_act_ILP_z_score)==SelectedCondition)
SelectedCondition <- "low_2h"
ILP_combined_meas <- NULL
DRT_Idx <- which(rownames(TF_act_ILP_z_score)==SelectedCondition)
DRT_Idx
PGN_Idx <- which(rownames(PW_act_ILP_z_score)==SelectedCondition)
PGN_Idx
DRT_Discretised[which(DRT_Discretised > ILP_z_score_cutoff,arr.ind = TRUE)] <- 1
DRT_Discretised[which(DRT_Discretised < (-1)*ILP_z_score_cutoff,arr.ind = TRUE)] <- -1
DRT_Discretised <- TF_act_ILP_z_score
DRT_Discretised[which(DRT_Discretised > ILP_z_score_cutoff,arr.ind = TRUE)] <- 1
DRT_Discretised[which(DRT_Discretised < (-1)*ILP_z_score_cutoff,arr.ind = TRUE)] <- -1
ILP_z_score_cutoff <- 2.0 # Choose cut-off value for discretisation
DRT_Discretised <- TF_act_ILP_z_score
DRT_Discretised[which(DRT_Discretised > ILP_z_score_cutoff,arr.ind = TRUE)] <- 1
DRT_Discretised[which(DRT_Discretised < (-1)*ILP_z_score_cutoff,arr.ind = TRUE)] <- -1
DRT_Discretised[which((DRT_Discretised <= ILP_z_score_cutoff) & (DRT_Discretised >= (-1)*ILP_z_score_cutoff),arr.ind = TRUE)] <- 0
View(DRT_Discretised)
which(DRT_Discretised > ILP_z_score_cutoff,arr.ind = TRUE)
DRT_Discretised <- TF_act_ILP_z_score
View(TF_act_ILP_z_score)
DRT_Discretised > ILP_z_score_cutoff
which(DRT_Discretised > ILP_z_score_cutoff,arr.ind = TRUE)
DRT_Discretised <- TF_act_ILP_z_score
which(DRT_Discretised > ILP_z_score_cutoff,arr.ind = TRUE)
DRT_Discretised[which(DRT_Discretised > ILP_z_score_cutoff,arr.ind = TRUE)]
DRT_Discretised <- TF_act_ILP_z_score
Idx_DRT_UP <- which(DRT_Discretised > ILP_z_score_cutoff,arr.ind = TRUE)
Idx_DRT_DN <- which(DRT_Discretised < (-1)*ILP_z_score_cutoff,arr.ind = TRUE)
Idx_DRT_BS <- which((DRT_Discretised <= ILP_z_score_cutoff) & (DRT_Discretised >= (-1)*ILP_z_score_cutoff),arr.ind = TRUE)
DRT_Discretised[Idx_DRT_UP] <- 1; DRT_Discretised[Idx_DRT_DN] <- -1; DRT_Discretised[Idx_DRT_BS] <- 0;
View(DRT_Discretised)
ILP_z_score_cutoff <- 1.5 # Choose cut-off value for discretisation
DRT_Discretised <- TF_act_ILP_z_score
Idx_DRT_UP <- which(DRT_Discretised > ILP_z_score_cutoff,arr.ind = TRUE)
Idx_DRT_DN <- which(DRT_Discretised < (-1)*ILP_z_score_cutoff,arr.ind = TRUE)
Idx_DRT_BS <- which((DRT_Discretised <= ILP_z_score_cutoff) & (DRT_Discretised >= (-1)*ILP_z_score_cutoff),arr.ind = TRUE)
DRT_Discretised[Idx_DRT_UP] <- 1; DRT_Discretised[Idx_DRT_DN] <- -1; DRT_Discretised[Idx_DRT_BS] <- 0;
View(DRT_Discretised)
PGN_Discretised <- PW_act_ILP_z_score
Idx_PGN_UP <- which(PGN_Discretised > ILP_z_score_cutoff,arr.ind = TRUE)
Idx_PGN_DN <- which(PGN_Discretised < (-1)*ILP_z_score_cutoff,arr.ind = TRUE)
Idx_PGN_BS <- which((PGN_Discretised <= ILP_z_score_cutoff) & (PGN_Discretised >= (-1)*ILP_z_score_cutoff),arr.ind = TRUE)
PGN_Discretised[Idx_PGN_UP] <- 1; PGN_Discretised[Idx_PGN_DN] <- -1; PGN_Discretised[Idx_PGN_BS] <- 0;
View(PGN_Discretised)
SelectedCondition <- "low_2h"
ILP_combined_meas <- NULL
DRT_Idx <- which(rownames(TF_act_ILP_z_score)==SelectedCondition)
PGN_Idx <- which(rownames(PW_act_ILP_z_score)==SelectedCondition)
ILP_combined_meas <- NULL
DRT_MeasIdx <- which(rownames(TF_act_ILP_z_score)==SelectedCondition)
PGN_MeasIdx <- which(rownames(PW_act_ILP_z_score)==SelectedCondition)
ILP_combined_meas <- c(DRT_Discretised[DRT_MeasIdx],PGN_Discretised[PGN_MeasIdx])
DRT_MeasIdx
ILP_combined_meas <- c(DRT_Discretised[DRT_MeasIdx,],PGN_Discretised[PGN_MeasIdx,])
ILP_combined_meas
View(PGN_Discretised)
colnames(PGN_Discretised) <- paste0("PRO_",colnames(PGN_Discretised))
View(PGN_Discretised)
colnames(PGN_Discretised)
ProgenyProtein <- read.table("PROGENy_Protein.csv",header = T,sep = ",",stringsAsFactors = F)
ProgenyProtein <- ProgenyProtein[order(ProgenyProtein[,2],ProgenyProtein[,3]),]
ProgenyProtein[,2] <- gsub("-",".",ProgenyProtein[,2],fixed=T)
ProgenyProtein_List <- vector(mode="list",length=length((unique(ProgenyProtein[,2]))))
for (counter in 1:length(unique(ProgenyProtein[,2]))) {
ProgenyProtein_List[[counter]]$pw <- unique(ProgenyProtein[,2])[counter]
Idx_pw_proteins <- which(unique(ProgenyProtein[,2])[counter]==ProgenyProtein[,2])
ProgenyProtein_List[[counter]]$prot <- ProgenyProtein[Idx_pw_proteins,3]
}
ProgenyProtein_List
ProgenyProtein
ILP_combined_meas <- c(DRT_Discretised[DRT_MeasIdx,],PGN_Discretised[PGN_MeasIdx,])
SelectedCondition <- "high_24h"
DRT_MeasIdx <- which(rownames(TF_act_ILP_z_score)==SelectedCondition)
PGN_MeasIdx <- which(rownames(PW_act_ILP_z_score)==SelectedCondition)
ProgenyProtein <- read.table("PROGENy_Protein.csv",header = T,sep = ",",stringsAsFactors = F)
ProgenyProtein <- ProgenyProtein[order(ProgenyProtein[,2],ProgenyProtein[,3]),]
ProgenyProtein[,2] <- gsub("-",".",ProgenyProtein[,2],fixed=T)
ProgenyProtein_List <- vector(mode="list",length=length((unique(ProgenyProtein[,2]))))
for (counter in 1:length(unique(ProgenyProtein[,2]))) {
ProgenyProtein_List[[counter]]$pw <- unique(ProgenyProtein[,2])[counter]
Idx_pw_proteins <- which(unique(ProgenyProtein[,2])[counter]==ProgenyProtein[,2])
ProgenyProtein_List[[counter]]$prot <- ProgenyProtein[Idx_pw_proteins,3]
}
ILP_combined_meas <- c(DRT_Discretised[DRT_MeasIdx,],PGN_Discretised[PGN_MeasIdx,])
ILP_combined_meas
DRT_Meas <- DRT_Discretised[DRT_MeasIdx,]
PGN_Meas <- PGN_Discretised[PGN_MeasIdx,]
which(DRT_Meas==0)
DRT_Meas==0
DRT_Meas <- DRT_Discretised[DRT_MeasIdx,]; DRT_Meas <- DRT_Meas[-which(DRT_Meas==0)]
PGN_Meas <- PGN_Discretised[PGN_MeasIdx,]; PGN_Meas <- PGN_Meas[-which(PGN_Meas==0)]
PGN_Meas
Idx_ProgenyList <- which(colnames(PGN_Meas)[counter]==unique(ProgenyProtein[,2]))
counter=1
Idx_ProgenyList <- which(colnames(PGN_Meas)[counter]==unique(ProgenyProtein[,2]))
Idx_ProgenyList
ProgenyProtein[,2]
unique(ProgenyProtein[,2])
PGN_Meas
colnames(PGN_Meas)
names(PGN_Meas)[counter]
Idx_ProgenyList <- which(names(PGN_Meas)[counter]==unique(ProgenyProtein[,2]))
Idx_ProgenyList
Matrix_ToAdd <- matrix(NA,2,length(ProgenyProtein_List[[Idx_ProgenyList]]$prot))
Matrix_ToAdd[1,] <- ProgenyProtein_List[[Idx_ProgenyList]]$prot
Matrix_ToAdd[2,] <- Progeny_Cutoff_current[counter2]
Matrix_ToAdd[1,] <- ProgenyProtein_List[[Idx_ProgenyList]]$prot
Matrix_ToAdd[2,] <- PGN_Meas[counter1]
Matrix_ToAdd[2,] <- PGN_Meas[counter]
Matrix_ToAdd
Progeny_Input_ToAdd <- cbind(Progeny_Input_ToAdd,Matrix_ToAdd)
PGN_Meas_ToAdd <- NULL
if (length(PGN_Meas)>0) {
for (counter in 1:length(PGN_Meas)) {
Idx_ProgenyList <- which(names(PGN_Meas)[counter]==unique(ProgenyProtein[,2]))
Matrix_ToAdd <- matrix(NA,2,length(ProgenyProtein_List[[Idx_ProgenyList]]$prot))
Matrix_ToAdd[1,] <- ProgenyProtein_List[[Idx_ProgenyList]]$prot
Matrix_ToAdd[2,] <- PGN_Meas[counter]
PGN_Meas_ToAdd <- cbind(PGN_Meas_ToAdd,Matrix_ToAdd)
}
}
ILP_combined_meas <- c()
Matrix_ToAdd <- rep(NA,length(ProgenyProtein_List[[Idx_ProgenyList]]$prot))
names(Matrix_ToAdd) <- ProgenyProtein_List[[Idx_ProgenyList]]$prot
Matrix_ToAdd <- PGN_Meas[counter]
Matrix_ToAdd
PGN_Meas_ToAdd <- NULL
if (length(PGN_Meas)>0) {
for (counter in 1:length(PGN_Meas)) {
Idx_ProgenyList <- which(names(PGN_Meas)[counter]==unique(ProgenyProtein[,2]))
Matrix_ToAdd <- rep(NA,length(ProgenyProtein_List[[Idx_ProgenyList]]$prot))
names(Matrix_ToAdd) <- ProgenyProtein_List[[Idx_ProgenyList]]$prot
Matrix_ToAdd <- PGN_Meas[counter]
PGN_Meas_ToAdd <- cbind(PGN_Meas_ToAdd,Matrix_ToAdd)
}
}
PGN_Meas_ToAdd
PGN_Meas_ToAdd <- NULL
if (length(PGN_Meas)>0) {
for (counter in 1:length(PGN_Meas)) {
Idx_ProgenyList <- which(names(PGN_Meas)[counter]==unique(ProgenyProtein[,2]))
Matrix_ToAdd <- rep(NA,length(ProgenyProtein_List[[Idx_ProgenyList]]$prot))
names(Matrix_ToAdd) <- ProgenyProtein_List[[Idx_ProgenyList]]$prot
Matrix_ToAdd <- PGN_Meas[counter]
PGN_Meas_ToAdd <- c(PGN_Meas_ToAdd,Matrix_ToAdd)
}
}
PGN_Meas_ToAdd
counter=1
PGN_Meas_ToAdd <- NULL
Idx_ProgenyList <- which(names(PGN_Meas)[counter]==unique(ProgenyProtein[,2]))
Idx_ProgenyList
Matrix_ToAdd <- rep(NA,length(ProgenyProtein_List[[Idx_ProgenyList]]$prot))
Matrix_ToAdd
names(Matrix_ToAdd) <- ProgenyProtein_List[[Idx_ProgenyList]]$prot
Matrix_ToAdd
Matrix_ToAdd <- PGN_Meas[counter]
Matrix_ToAdd
PGN_Meas_ToAdd <- NULL
if (length(PGN_Meas)>0) {
for (counter in 1:length(PGN_Meas)) {
Idx_ProgenyList <- which(names(PGN_Meas)[counter]==unique(ProgenyProtein[,2]))
Matrix_ToAdd <- rep(NA,length(ProgenyProtein_List[[Idx_ProgenyList]]$prot))
Matrix_ToAdd <- rep(PGN_Meas[counter],length(ProgenyProtein_List[[Idx_ProgenyList]]$prot))
names(Matrix_ToAdd) <- ProgenyProtein_List[[Idx_ProgenyList]]$prot
PGN_Meas_ToAdd <- c(PGN_Meas_ToAdd,Matrix_ToAdd)
}
}
PGN_Meas_ToAdd
ILP_combined_meas <- c(DRT_Meas,PGN_Meas_ToAdd)
ILP_combined_meas
ILP_z_score_cutoff <- 2 # Choose cut-off value for discretisation
DRT_Discretised <- TF_act_ILP_z_score
Idx_DRT_UP <- which(DRT_Discretised > ILP_z_score_cutoff,arr.ind = TRUE)
Idx_DRT_DN <- which(DRT_Discretised < (-1)*ILP_z_score_cutoff,arr.ind = TRUE)
Idx_DRT_BS <- which((DRT_Discretised <= ILP_z_score_cutoff) & (DRT_Discretised >= (-1)*ILP_z_score_cutoff),arr.ind = TRUE)
DRT_Discretised[Idx_DRT_UP] <- 1; DRT_Discretised[Idx_DRT_DN] <- -1; DRT_Discretised[Idx_DRT_BS] <- 0;
PGN_Discretised <- PW_act_ILP_z_score
Idx_PGN_UP <- which(PGN_Discretised > ILP_z_score_cutoff,arr.ind = TRUE)
Idx_PGN_DN <- which(PGN_Discretised < (-1)*ILP_z_score_cutoff,arr.ind = TRUE)
Idx_PGN_BS <- which((PGN_Discretised <= ILP_z_score_cutoff) & (PGN_Discretised >= (-1)*ILP_z_score_cutoff),arr.ind = TRUE)
PGN_Discretised[Idx_PGN_UP] <- 1; PGN_Discretised[Idx_PGN_DN] <- -1; PGN_Discretised[Idx_PGN_BS] <- 0;
colnames(PGN_Discretised) <- paste0("PRO_",colnames(PGN_Discretised))
SelectedCondition <- "high_24h"
DRT_MeasIdx <- which(rownames(TF_act_ILP_z_score)==SelectedCondition)
PGN_MeasIdx <- which(rownames(PW_act_ILP_z_score)==SelectedCondition)
ProgenyProtein <- read.table("PROGENy_Protein.csv",header = T,sep = ",",stringsAsFactors = F)
ProgenyProtein <- ProgenyProtein[order(ProgenyProtein[,2],ProgenyProtein[,3]),]
ProgenyProtein[,2] <- gsub("-",".",ProgenyProtein[,2],fixed=T)
ProgenyProtein_List <- vector(mode="list",length=length((unique(ProgenyProtein[,2]))))
for (counter in 1:length(unique(ProgenyProtein[,2]))) {
ProgenyProtein_List[[counter]]$pw <- unique(ProgenyProtein[,2])[counter]
Idx_pw_proteins <- which(unique(ProgenyProtein[,2])[counter]==ProgenyProtein[,2])
ProgenyProtein_List[[counter]]$prot <- ProgenyProtein[Idx_pw_proteins,3]
}
DRT_Meas <- DRT_Discretised[DRT_MeasIdx,]; DRT_Meas <- DRT_Meas[-which(DRT_Meas==0)]
PGN_Meas <- PGN_Discretised[PGN_MeasIdx,]; PGN_Meas <- PGN_Meas[-which(PGN_Meas==0)]
PGN_Meas_ToAdd <- NULL
if (length(PGN_Meas)>0) {
for (counter in 1:length(PGN_Meas)) {
Idx_ProgenyList <- which(names(PGN_Meas)[counter]==unique(ProgenyProtein[,2]))
Matrix_ToAdd <- rep(NA,length(ProgenyProtein_List[[Idx_ProgenyList]]$prot))
Matrix_ToAdd <- rep(PGN_Meas[counter],length(ProgenyProtein_List[[Idx_ProgenyList]]$prot))
names(Matrix_ToAdd) <- ProgenyProtein_List[[Idx_ProgenyList]]$prot
PGN_Meas_ToAdd <- c(PGN_Meas_ToAdd,Matrix_ToAdd)
}
}
ILP_combined_meas <- c(DRT_Meas,PGN_Meas_ToAdd)
ILP_combined_meas
write.table(ILP_combined_meas,file = paste0("ILP_Meas_",SelectedCondition,".tsv"),quote = T,sep = "\t",col.names = T)
ILP_combined <- as.matrix(c(DRT_Meas,PGN_Meas_ToAdd))
View(ILP_combined)
c(DRT_Meas,PGN_Meas_ToAdd)
as.matrix(c(DRT_Meas,PGN_Meas_ToAdd))
t(as.matrix(c(DRT_Meas,PGN_Meas_ToAdd)))
ILP_combined_meas <- t(as.matrix(c(DRT_Meas,PGN_Meas_ToAdd)))
write.table(ILP_combined_meas,file = paste0("ILP_Meas_",SelectedCondition,".tsv"),quote = T,sep = "\t",col.names = T)
write.table(ILP_combined_meas,file = paste0("ILP_Meas_",SelectedCondition,".tsv"),quote = F,sep = "\t",col.names = T)
write.table(ILP_combined_meas,file = paste0("ILP_Meas_",SelectedCondition,"_CutOff_",toString(ILP_z_score_cutoff),".tsv"),quote = F,sep = "\t",col.names = T)
ILP_z_score_cutoff <- 2 # Choose cut-off value for discretisation
DRT_Discretised <- TF_act_ILP_z_score
Idx_DRT_UP <- which(DRT_Discretised > ILP_z_score_cutoff,arr.ind = TRUE)
Idx_DRT_DN <- which(DRT_Discretised < (-1)*ILP_z_score_cutoff,arr.ind = TRUE)
Idx_DRT_BS <- which((DRT_Discretised <= ILP_z_score_cutoff) & (DRT_Discretised >= (-1)*ILP_z_score_cutoff),arr.ind = TRUE)
DRT_Discretised[Idx_DRT_UP] <- 1; DRT_Discretised[Idx_DRT_DN] <- -1; DRT_Discretised[Idx_DRT_BS] <- 0;
PGN_Discretised <- PW_act_ILP_z_score
Idx_PGN_UP <- which(PGN_Discretised > ILP_z_score_cutoff,arr.ind = TRUE)
Idx_PGN_DN <- which(PGN_Discretised < (-1)*ILP_z_score_cutoff,arr.ind = TRUE)
Idx_PGN_BS <- which((PGN_Discretised <= ILP_z_score_cutoff) & (PGN_Discretised >= (-1)*ILP_z_score_cutoff),arr.ind = TRUE)
PGN_Discretised[Idx_PGN_UP] <- 1; PGN_Discretised[Idx_PGN_DN] <- -1; PGN_Discretised[Idx_PGN_BS] <- 0;
colnames(PGN_Discretised) <- paste0("PRO_",colnames(PGN_Discretised))
SelectedCondition <- "low_2h"
DRT_MeasIdx <- which(rownames(TF_act_ILP_z_score)==SelectedCondition)
PGN_MeasIdx <- which(rownames(PW_act_ILP_z_score)==SelectedCondition)
ProgenyProtein <- read.table("PROGENy_Protein.csv",header = T,sep = ",",stringsAsFactors = F)
ProgenyProtein <- ProgenyProtein[order(ProgenyProtein[,2],ProgenyProtein[,3]),]
ProgenyProtein[,2] <- gsub("-",".",ProgenyProtein[,2],fixed=T)
ProgenyProtein_List <- vector(mode="list",length=length((unique(ProgenyProtein[,2]))))
for (counter in 1:length(unique(ProgenyProtein[,2]))) {
ProgenyProtein_List[[counter]]$pw <- unique(ProgenyProtein[,2])[counter]
Idx_pw_proteins <- which(unique(ProgenyProtein[,2])[counter]==ProgenyProtein[,2])
ProgenyProtein_List[[counter]]$prot <- ProgenyProtein[Idx_pw_proteins,3]
}
DRT_Meas <- DRT_Discretised[DRT_MeasIdx,]; DRT_Meas <- DRT_Meas[-which(DRT_Meas==0)]
PGN_Meas <- PGN_Discretised[PGN_MeasIdx,]; PGN_Meas <- PGN_Meas[-which(PGN_Meas==0)]
PGN_Meas_ToAdd <- NULL
if (length(PGN_Meas)>0) {
for (counter in 1:length(PGN_Meas)) {
Idx_ProgenyList <- which(names(PGN_Meas)[counter]==unique(ProgenyProtein[,2]))
Matrix_ToAdd <- rep(NA,length(ProgenyProtein_List[[Idx_ProgenyList]]$prot))
Matrix_ToAdd <- rep(PGN_Meas[counter],length(ProgenyProtein_List[[Idx_ProgenyList]]$prot))
names(Matrix_ToAdd) <- ProgenyProtein_List[[Idx_ProgenyList]]$prot
PGN_Meas_ToAdd <- c(PGN_Meas_ToAdd,Matrix_ToAdd)
}
}
ILP_combined_meas <- t(as.matrix(c(DRT_Meas,PGN_Meas_ToAdd)))
write.table(ILP_combined_meas,file = paste0("ILP_Meas_",SelectedCondition,"_CutOff_",toString(ILP_z_score_cutoff),".tsv"),quote = F,sep = "\t",col.names = T)
