idx <- which(constraints8[[ii]]==paste0(ss1, " - ", ss2, " - ", ss3, " = 0"))
constraints8[[ii]][idx] <- gsub(constraints8[[ii]][idx], pattern = " = 0", replacement = " = 1")
}
}
}
return(unlist(constraints8))
}
##
all_constraints <- function(c0=c0, c1=c1, c2=c2, c3=c3, c4=c4, c5=c5, c6=c6, c7=c7, c8=c8){
allConst <- c(c0, c1, c2, c3, c4, c5, c6, c7, c8)
allConstraints <- paste0("c", 1:length(allConst), ":\t", allConst, "\t \t")
return(allConstraints)
}
# ##
# readOutResult <- function(cplexSolutionFileName, variables = variables, pknList=pknList){
#
#   cplexSolutionData <- xmlParse(cplexSolutionFileName)
#   cplexSolution <- xmlToList(cplexSolutionData)
#
#   sif <- matrix(data = "", nrow = 1, ncol = 3)
#   nodes <- matrix(data = "", nrow = 1, ncol = 3)
#   nodesUp <- matrix(data = "", nrow = 1, ncol = 3)
#   nodesDown <- matrix(data = "", nrow = 1, ncol = 3)
#   edgesUp <- matrix(data = "", nrow = 1, ncol = 3)
#   edgesDown <- matrix(data = "", nrow = 1, ncol = 3)
#   ctrl <- 0
#
#   for(i in 1:length(cplexSolution$variables)){
#
#     if(strsplit(cplexSolution$variables[[i]][1], split = "_")[[1]][2] == "1" && !grepl(pattern = "absDiff", x = cplexSolution$variables[[i]][1])){
#
#       if(strsplit(variables[[1]]$exp[which(variables[[1]]$variables==cplexSolution$variables[[i]][1])], split = " ")[[1]][1]=="Species"){
#
#         nodes <- rbind(nodes, c(cplexSolution$variables[[i]][1],
#                        gsub(variables[[1]]$exp[which(variables[[1]]$variables==cplexSolution$variables[[i]][1])], pattern = " in experiment 1", replacement = ""),
#                        as.numeric(cplexSolution$variables[[i]][3])))
#
#       }
#
#       if(strsplit(variables[[1]]$exp[which(variables[[1]]$variables==cplexSolution$variables[[i]][1])], split = " ")[[1]][1]=="SpeciesUP"){
#
#         nodesUp <- rbind(nodesUp, c(cplexSolution$variables[[i]][1],
#                                 gsub(variables[[1]]$exp[which(variables[[1]]$variables==cplexSolution$variables[[i]][1])], pattern = " in experiment 1", replacement = ""),
#                                 as.numeric(cplexSolution$variables[[i]][3])))
#
#       }
#
#       if(strsplit(variables[[1]]$exp[which(variables[[1]]$variables==cplexSolution$variables[[i]][1])], split = " ")[[1]][1]=="SpeciesDown"){
#
#         nodesDown <- rbind(nodesDown, c(cplexSolution$variables[[i]][1],
#                                 gsub(variables[[1]]$exp[which(variables[[1]]$variables==cplexSolution$variables[[i]][1])], pattern = " in experiment 1", replacement = ""),
#                                 as.numeric(cplexSolution$variables[[i]][3])))
#
#       }
#
#       if(strsplit(variables[[1]]$exp[which(variables[[1]]$variables==cplexSolution$variables[[i]][1])], split = " ")[[1]][1]=="ReactionUp"){
#
#         edgesUp <- rbind(edgesUp, c(cplexSolution$variables[[i]][1],
#                                 gsub(variables[[1]]$exp[which(variables[[1]]$variables==cplexSolution$variables[[i]][1])], pattern = " in experiment 1", replacement = ""),
#                                 as.numeric(cplexSolution$variables[[i]][3])))
#
#       }
#
#       if(strsplit(variables[[1]]$exp[which(variables[[1]]$variables==cplexSolution$variables[[i]][1])], split = " ")[[1]][1]=="ReactionDown"){
#
#         edgesDown <- rbind(edgesDown, c(cplexSolution$variables[[i]][1],
#                                 gsub(variables[[1]]$exp[which(variables[[1]]$variables==cplexSolution$variables[[i]][1])], pattern = " in experiment 1", replacement = ""),
#                                 as.numeric(cplexSolution$variables[[i]][3])))
#
#       }
#
#     }
#
#   }
#
#   colnames(nodes) <- c("variable", "exp", "value")
#   colnames(nodesUp) <- c("variable", "exp", "value")
#   colnames(nodesDown) <- c("variable", "exp", "value")
#   colnames(edgesUp) <- c("variable", "exp", "value")
#   colnames(edgesDown) <- c("variable", "exp", "value")
#
#   nodes <- nodes[-1, ]
#   nodesUp <- nodesUp[-1, ]
#   nodesDown <- nodesDown[-1, ]
#   edgesUp <- edgesUp[-1, ]
#   edgesDown <- edgesDown[-1, ]
#
#   if(class(edgesDown) != "matrix"){
#
#     edgesDown <- as.matrix(t(edgesDown))
#
#   }
#
#   if(class(edgesUp) != "matrix"){
#
#     edgesUp <- as.matrix(t(edgesUp))
#
#   }
#
#   sif <- matrix(data = "", nrow = 1, ncol = 3)
#   kk1 <- as.numeric(which(edgesUp[, 3] == 1))
#   if(length(kk1) > 0){
#
#     for(i in 1:length(kk1)){
#
#       ss <- strsplit(gsub(pattern = "ReactionUp ", replacement = "", x = edgesUp[kk1[i], 2]), split = "=")[[1]][1]
#       tt <- strsplit(gsub(pattern = "ReactionUp ", replacement = "", x = edgesUp[kk1[i], 2]), split = "=")[[1]][2]
#
#       if((nodes[which(nodes[, 2]==paste0("Species ", ss)), 3] != "0") && (nodes[which(nodes[, 2]==paste0("Species ", tt)), 3] != "0")){
#
#         sif <- rbind(sif, as.matrix(pknList[intersect(which(as.character(pknList$Node1)==ss), which(as.character(pknList$Node2)==tt)), ]))
#
#       }
#
#     }
#
#   }
#   kk1 <- as.numeric(which(edgesDown[, 3] == 1))
#   if(length(kk1) > 0){
#
#     for(i in 1:length(kk1)){
#
#       ss <- strsplit(gsub(pattern = "ReactionDown ", replacement = "", x = edgesDown[kk1[i], 2]), split = "=")[[1]][1]
#       tt <- strsplit(gsub(pattern = "ReactionDown ", replacement = "", x = edgesDown[kk1[i], 2]), split = "=")[[1]][2]
#
#       if((nodes[which(nodes[, 2]==paste0("Species ", ss)), 3] != "0") && (nodes[which(nodes[, 2]==paste0("Species ", tt)), 3] != "0") &&
#          (nodes[which(nodes[, 2]==paste0("Species ", ss)), 3] != "-0") && (nodes[which(nodes[, 2]==paste0("Species ", tt)), 3] != "-0")){
#
#         sif <- rbind(sif, as.matrix(pknList[intersect(which(as.character(pknList$Node1)==ss), which(as.character(pknList$Node2)==tt)), ]))
#
#       }
#
#     }
#
#   }
#
#   write.table(x = nodes, file = "nodesAttributes.txt", quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
#   write.table(x = nodesUp, file = "nodesUpAttributes.txt", quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
#   write.table(x = nodesDown, file = "nodesDownAttributes.txt", quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
#   write.table(x = edgesUp, file = "reactionsUpAttributes.txt", quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
#   write.table(x = edgesDown, file = "reactionDownAttributes.txt", quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
#
#   write.table(x = sif, file = "interactions.txt", quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
#
# }
##
readOutResult <- function(cplexSolutionFileName, variables = variables, pknList=pknList, conditionIDX = conditionIDX){
cplexSolutionData <- xmlParse(cplexSolutionFileName)
cplexSolution <- xmlToList(cplexSolutionData)
sif <- matrix(data = "", nrow = 1, ncol = 3)
nodes <- matrix(data = "", nrow = 1, ncol = 3)
nodesUp <- matrix(data = "", nrow = 1, ncol = 3)
nodesDown <- matrix(data = "", nrow = 1, ncol = 3)
edgesUp <- matrix(data = "", nrow = 1, ncol = 3)
edgesDown <- matrix(data = "", nrow = 1, ncol = 3)
ctrl <- 0
for(i in 1:length(cplexSolution$variables)){
if(strsplit(cplexSolution$variables[[i]][1], split = "_")[[1]][2] == as.character(conditionIDX) && !grepl(pattern = "absDiff", x = cplexSolution$variables[[i]][1])){
if(strsplit(variables[[conditionIDX]]$exp[which(variables[[conditionIDX]]$variables==cplexSolution$variables[[i]][1])], split = " ")[[1]][1]=="Species"){
nodes <- rbind(nodes, c(cplexSolution$variables[[i]][1],
gsub(variables[[conditionIDX]]$exp[which(variables[[conditionIDX]]$variables==cplexSolution$variables[[i]][1])], pattern = paste0(" in experiment ", conditionIDX), replacement = ""),
as.numeric(cplexSolution$variables[[i]][3])))
}
if(strsplit(variables[[conditionIDX]]$exp[which(variables[[conditionIDX]]$variables==cplexSolution$variables[[i]][1])], split = " ")[[1]][1]=="SpeciesUP"){
nodesUp <- rbind(nodesUp, c(cplexSolution$variables[[i]][1],
gsub(variables[[conditionIDX]]$exp[which(variables[[conditionIDX]]$variables==cplexSolution$variables[[i]][1])], pattern = paste0(" in experiment ", conditionIDX), replacement = ""),
as.numeric(cplexSolution$variables[[i]][3])))
}
if(strsplit(variables[[conditionIDX]]$exp[which(variables[[conditionIDX]]$variables==cplexSolution$variables[[i]][1])], split = " ")[[1]][1]=="SpeciesDown"){
nodesDown <- rbind(nodesDown, c(cplexSolution$variables[[i]][1],
gsub(variables[[conditionIDX]]$exp[which(variables[[conditionIDX]]$variables==cplexSolution$variables[[i]][1])], pattern = paste0(" in experiment ", conditionIDX), replacement = ""),
as.numeric(cplexSolution$variables[[i]][3])))
}
if(strsplit(variables[[conditionIDX]]$exp[which(variables[[conditionIDX]]$variables==cplexSolution$variables[[i]][1])], split = " ")[[1]][1]=="ReactionUp"){
edgesUp <- rbind(edgesUp, c(cplexSolution$variables[[i]][1],
gsub(variables[[conditionIDX]]$exp[which(variables[[conditionIDX]]$variables==cplexSolution$variables[[i]][1])], pattern = paste0(" in experiment ", conditionIDX), replacement = ""),
as.numeric(cplexSolution$variables[[i]][3])))
}
if(strsplit(variables[[conditionIDX]]$exp[which(variables[[conditionIDX]]$variables==cplexSolution$variables[[i]][1])], split = " ")[[1]][1]=="ReactionDown"){
edgesDown <- rbind(edgesDown, c(cplexSolution$variables[[i]][1],
gsub(variables[[conditionIDX]]$exp[which(variables[[conditionIDX]]$variables==cplexSolution$variables[[i]][1])], pattern = paste0(" in experiment ", conditionIDX), replacement = ""),
as.numeric(cplexSolution$variables[[i]][3])))
}
}
}
colnames(nodes) <- c("variable", "exp", "value")
colnames(nodesUp) <- c("variable", "exp", "value")
colnames(nodesDown) <- c("variable", "exp", "value")
colnames(edgesUp) <- c("variable", "exp", "value")
colnames(edgesDown) <- c("variable", "exp", "value")
nodes <- nodes[-1, ]
nodesUp <- nodesUp[-1, ]
nodesDown <- nodesDown[-1, ]
edgesUp <- edgesUp[-1, ]
edgesDown <- edgesDown[-1, ]
if(class(edgesDown) != "matrix"){
edgesDown <- as.matrix(t(edgesDown))
}
if(class(edgesUp) != "matrix"){
edgesUp <- as.matrix(t(edgesUp))
}
sif <- matrix(data = "", nrow = 1, ncol = 3)
kk1 <- as.numeric(which(edgesUp[, 3] == 1))
if(length(kk1) > 0){
for(i in 1:length(kk1)){
ss <- strsplit(gsub(pattern = "ReactionUp ", replacement = "", x = edgesUp[kk1[i], 2]), split = "=")[[1]][1]
tt <- strsplit(gsub(pattern = "ReactionUp ", replacement = "", x = edgesUp[kk1[i], 2]), split = "=")[[1]][2]
if((nodes[which(nodes[, 2]==paste0("Species ", ss)), 3] != "0") && (nodes[which(nodes[, 2]==paste0("Species ", tt)), 3] != "0")){
sif <- rbind(sif, as.matrix(pknList[intersect(which(as.character(pknList$Node1)==ss), which(as.character(pknList$Node2)==tt)), ]))
}
}
}
kk1 <- as.numeric(which(edgesDown[, 3] == 1))
if(length(kk1) > 0){
for(i in 1:length(kk1)){
ss <- strsplit(gsub(pattern = "ReactionDown ", replacement = "", x = edgesDown[kk1[i], 2]), split = "=")[[1]][1]
tt <- strsplit(gsub(pattern = "ReactionDown ", replacement = "", x = edgesDown[kk1[i], 2]), split = "=")[[1]][2]
if((nodes[which(nodes[, 2]==paste0("Species ", ss)), 3] != "0") && (nodes[which(nodes[, 2]==paste0("Species ", tt)), 3] != "0") &&
(nodes[which(nodes[, 2]==paste0("Species ", ss)), 3] != "-0") && (nodes[which(nodes[, 2]==paste0("Species ", tt)), 3] != "-0")){
sif <- rbind(sif, as.matrix(pknList[intersect(which(as.character(pknList$Node1)==ss), which(as.character(pknList$Node2)==tt)), ]))
}
}
}
write.table(x = nodes, file = paste0("nodesAttributes_", conditionIDX, ".txt"), quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
write.table(x = nodesUp, file = paste0("nodesUpAttributes_", conditionIDX, ".txt"), quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
write.table(x = nodesDown, file = paste0("nodesDownAttributes_", conditionIDX, ".txt"), quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
write.table(x = edgesUp, file = paste0("reactionsUpAttributes_", conditionIDX, ".txt"), quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
write.table(x = edgesDown, file = paste0("reactionsDownAttributes_", conditionIDX, ".txt"), quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
write.table(x = sif, file = paste0("interactions_", conditionIDX, ".txt"), quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
}
library(readr)
library(tidyr)
measurements <- read_delim("measurements_Case4.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
inputs <- read.table("inputs_Case4.txt", sep="\t", header = TRUE)
network <- read.table("network_Ex1_positive.sif", sep = "\t", header = FALSE)
data <- measurements
pknList <- as.data.frame(network)
colnames(pknList) <- c("Node1", "Sign", "Node2")
dataMatrix <- buildDataMatrix(data = data, pknList = pknList, inputs = inputs, cutoff = 0.1)
variables <- create_variables_all(pknList = pknList, dataMatrix = dataMatrix)
bounds <- write_boundaries(variables = variables)
oF <- write_objective_function_all(dataMatrix = dataMatrix, variables = variables, alpha = 1, beta = 0.01)
c0 <- write_constraints_objFunction_all(variables = variables, dataMatrix = dataMatrix)
c1 <- write_constraints_1_all(variables = variables)
c2 <- write_constraints_2_all(variables = variables)
c3 <- write_constraints_3_all(variables = variables)
c4 <- write_constraints_4_all(variables = variables)
c5 <- write_constraints_5_all(variables = variables)
c6 <- write_constraints_6(variables = variables, dataMatrix = dataMatrix)
c7 <- write_constraints_7(variables = variables, dataMatrix = dataMatrix)
c8 <- write_constraints_8(variables = variables, inputs = inputs)
allC <- all_constraints(c0 = c0, c1 = c2, c2 = c2, c3 = c3, c4 = c4, c5 = c5, c6 = c6, c7 = c7, c8 = c8)
data = "testFile.lp"
write("enter Problem", data)
write("", data, append = TRUE)
write("Minimize", data, append = TRUE)
write(oF, data, append = TRUE)
write("Subject To", data, append = TRUE)
write(allC, data, append = TRUE)
write("Bounds", data, append = TRUE)
write(bounds, data, append = TRUE)
write("Integers", data, append = TRUE)
for(i in 1:length(variables)){
write(variables[[i]]$variables, data, append = TRUE)
}
write("End", data, append = TRUE)
system(paste0(getwd(), "/cplex -f cplexCommand.txt"))
file.remove(... = "cplex.log")
library(XML)
cplexSolutionFileName <- "results1.txt"
for(i in 1:length(variables)){
readOutResult(cplexSolutionFileName = cplexSolutionFileName, variables = variables, pknList = pknList, conditionIDX = i)
}
variables$Condition_1$exp
file.remove(... = "testFile.lp")
####
# Loading stuff
rm(list=ls())
source("ilpFunctions.R")
library(readr)
library(tidyr)
measurements <- read_delim("measurements_Case4.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
inputs <- read.table("inputs_Case4.txt", sep="\t", header = TRUE)
network <- read.table("network_Ex1_positive.sif", sep = "\t", header = FALSE)
# network <- read.table("network_Ex1_negative.sif", sep = "\t", header = FALSE)
data <- measurements
pknList <- as.data.frame(network)
colnames(pknList) <- c("Node1", "Sign", "Node2")
# upNodes <- "P"
####
# Executing functions
dataMatrix <- buildDataMatrix(data = data, pknList = pknList, inputs = inputs, cutoff = 0.1)
variables <- create_variables_all(pknList = pknList, dataMatrix = dataMatrix)
bounds <- write_boundaries(variables = variables)
oF <- write_objective_function_all(dataMatrix = dataMatrix, variables = variables, alpha = 1, beta = 0.01)
c0 <- write_constraints_objFunction_all(variables = variables, dataMatrix = dataMatrix)
c1 <- write_constraints_1_all(variables = variables)
c2 <- write_constraints_2_all(variables = variables)
c3 <- write_constraints_3_all(variables = variables)
c4 <- write_constraints_4_all(variables = variables)
c5 <- write_constraints_5_all(variables = variables)
c6 <- write_constraints_6(variables = variables, dataMatrix = dataMatrix)
c7 <- write_constraints_7(variables = variables, dataMatrix = dataMatrix)
c8 <- write_constraints_8(variables = variables, inputs = inputs)
allC <- all_constraints(c0 = c0, c1 = c2, c2 = c2, c3 = c3, c4 = c4, c5 = c5, c6 = c6, c7 = c7, c8 = c8)
# write the .lp file
data = "testFile.lp"
write("enter Problem", data)
write("", data, append = TRUE)
write("Minimize", data, append = TRUE)
write(oF, data, append = TRUE)
write("Subject To", data, append = TRUE)
write(allC, data, append = TRUE)
write("Bounds", data, append = TRUE)
write(bounds, data, append = TRUE)
write("Integers", data, append = TRUE)
for(i in 1:length(variables)){
write(variables[[i]]$variables, data, append = TRUE)
}
write("End", data, append = TRUE)
system(paste0(getwd(), "/cplex -f cplexCommand.txt"))
file.remove(... = "cplex.log")
library(XML)
cplexSolutionFileName <- "results1.txt"
for(i in 1:length(variables)){
readOutResult(cplexSolutionFileName = cplexSolutionFileName, variables = variables, pknList = pknList, conditionIDX = i)
}
variables$Condition_1$exp
# file.remove(... = "results1.txt")
file.remove(... = "testFile.lp")
rm(list=ls())
source("ilpFunctions.R")
library(readr)
library(tidyr)
measurements <- read_delim("measurements_Case2.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
inputs <- read.table("inputs_Case2.txt", sep="\t", header = TRUE)
View(inputs)
View(measurements)
rm(list=ls())
source("ilpFunctions.R")
library(readr)
library(tidyr)
measurements <- read_delim("measurements_Case3.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
inputs <- read.table("inputs_Case3.txt", sep="\t", header = TRUE)
network <- read.table("network_Ex1_negative.sif", sep = "\t", header = FALSE)
View(inputs)
View(measurements)
####
# Loading stuff
rm(list=ls())
source("ilpFunctions.R")
library(readr)
library(tidyr)
measurements <- read_delim("measurements_Case3.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
inputs <- read.table("inputs_Case3.txt", sep="\t", header = TRUE)
# network <- read.table("network_Ex1_positive.sif", sep = "\t", header = FALSE)
network <- read.table("network_Ex1_negative.sif", sep = "\t", header = FALSE)
data <- measurements
pknList <- as.data.frame(network)
colnames(pknList) <- c("Node1", "Sign", "Node2")
# upNodes <- "P"
####
# Executing functions
dataMatrix <- buildDataMatrix(data = data, pknList = pknList, inputs = inputs, cutoff = 0.1)
variables <- create_variables_all(pknList = pknList, dataMatrix = dataMatrix)
bounds <- write_boundaries(variables = variables)
oF <- write_objective_function_all(dataMatrix = dataMatrix, variables = variables, alpha = 1, beta = 0.01)
c0 <- write_constraints_objFunction_all(variables = variables, dataMatrix = dataMatrix)
c1 <- write_constraints_1_all(variables = variables)
c2 <- write_constraints_2_all(variables = variables)
c3 <- write_constraints_3_all(variables = variables)
c4 <- write_constraints_4_all(variables = variables)
c5 <- write_constraints_5_all(variables = variables)
c6 <- write_constraints_6(variables = variables, dataMatrix = dataMatrix)
c7 <- write_constraints_7(variables = variables, dataMatrix = dataMatrix)
c8 <- write_constraints_8(variables = variables, inputs = inputs)
allC <- all_constraints(c0 = c0, c1 = c2, c2 = c2, c3 = c3, c4 = c4, c5 = c5, c6 = c6, c7 = c7, c8 = c8)
# write the .lp file
data = "testFile.lp"
write("enter Problem", data)
write("", data, append = TRUE)
write("Minimize", data, append = TRUE)
write(oF, data, append = TRUE)
write("Subject To", data, append = TRUE)
write(allC, data, append = TRUE)
write("Bounds", data, append = TRUE)
write(bounds, data, append = TRUE)
write("Integers", data, append = TRUE)
for(i in 1:length(variables)){
write(variables[[i]]$variables, data, append = TRUE)
}
write("End", data, append = TRUE)
system(paste0(getwd(), "/cplex -f cplexCommand.txt"))
file.remove(... = "cplex.log")
library(XML)
cplexSolutionFileName <- "results1.txt"
for(i in 1:length(variables)){
readOutResult(cplexSolutionFileName = cplexSolutionFileName, variables = variables, pknList = pknList, conditionIDX = i)
}
variables$Condition_1$exp
# file.remove(... = "results1.txt")
file.remove(... = "testFile.lp")
####
# Loading stuff
rm(list=ls())
source("ilpFunctions.R")
library(readr)
library(tidyr)
measurements <- read_delim("measurements_Case4.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
inputs <- read.table("inputs_Case4.txt", sep="\t", header = TRUE)
# network <- read.table("network_Ex1_positive.sif", sep = "\t", header = FALSE)
network <- read.table("network_Ex1_negative.sif", sep = "\t", header = FALSE)
data <- measurements
pknList <- as.data.frame(network)
colnames(pknList) <- c("Node1", "Sign", "Node2")
# upNodes <- "P"
####
# Executing functions
dataMatrix <- buildDataMatrix(data = data, pknList = pknList, inputs = inputs, cutoff = 0.1)
variables <- create_variables_all(pknList = pknList, dataMatrix = dataMatrix)
bounds <- write_boundaries(variables = variables)
oF <- write_objective_function_all(dataMatrix = dataMatrix, variables = variables, alpha = 1, beta = 0.01)
c0 <- write_constraints_objFunction_all(variables = variables, dataMatrix = dataMatrix)
c1 <- write_constraints_1_all(variables = variables)
c2 <- write_constraints_2_all(variables = variables)
c3 <- write_constraints_3_all(variables = variables)
c4 <- write_constraints_4_all(variables = variables)
c5 <- write_constraints_5_all(variables = variables)
c6 <- write_constraints_6(variables = variables, dataMatrix = dataMatrix)
c7 <- write_constraints_7(variables = variables, dataMatrix = dataMatrix)
c8 <- write_constraints_8(variables = variables, inputs = inputs)
allC <- all_constraints(c0 = c0, c1 = c2, c2 = c2, c3 = c3, c4 = c4, c5 = c5, c6 = c6, c7 = c7, c8 = c8)
# write the .lp file
data = "testFile.lp"
write("enter Problem", data)
write("", data, append = TRUE)
write("Minimize", data, append = TRUE)
write(oF, data, append = TRUE)
write("Subject To", data, append = TRUE)
write(allC, data, append = TRUE)
write("Bounds", data, append = TRUE)
write(bounds, data, append = TRUE)
write("Integers", data, append = TRUE)
for(i in 1:length(variables)){
write(variables[[i]]$variables, data, append = TRUE)
}
write("End", data, append = TRUE)
system(paste0(getwd(), "/cplex -f cplexCommand.txt"))
file.remove(... = "cplex.log")
library(XML)
cplexSolutionFileName <- "results1.txt"
for(i in 1:length(variables)){
readOutResult(cplexSolutionFileName = cplexSolutionFileName, variables = variables, pknList = pknList, conditionIDX = i)
}
variables$Condition_1$exp
# file.remove(... = "results1.txt")
file.remove(... = "testFile.lp")
####
# Loading stuff
rm(list=ls())
source("ilpFunctions.R")
library(readr)
library(tidyr)
measurements <- read_delim("measurements_Case4.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
inputs <- read.table("inputs_Case4.txt", sep="\t", header = TRUE)
# network <- read.table("network_Ex1_positive.sif", sep = "\t", header = FALSE)
network <- read.table("network_Ex1_negative.sif", sep = "\t", header = FALSE)
data <- measurements
pknList <- as.data.frame(network)
colnames(pknList) <- c("Node1", "Sign", "Node2")
# upNodes <- "P"
####
# Executing functions
dataMatrix <- buildDataMatrix(data = data, pknList = pknList, inputs = inputs, cutoff = 0.1)
variables <- create_variables_all(pknList = pknList, dataMatrix = dataMatrix)
bounds <- write_boundaries(variables = variables)
oF <- write_objective_function_all(dataMatrix = dataMatrix, variables = variables, alpha = 1, beta = 0.01)
c0 <- write_constraints_objFunction_all(variables = variables, dataMatrix = dataMatrix)
c1 <- write_constraints_1_all(variables = variables)
c2 <- write_constraints_2_all(variables = variables)
c3 <- write_constraints_3_all(variables = variables)
c4 <- write_constraints_4_all(variables = variables)
c5 <- write_constraints_5_all(variables = variables)
c6 <- write_constraints_6(variables = variables, dataMatrix = dataMatrix)
c7 <- write_constraints_7(variables = variables, dataMatrix = dataMatrix)
c8 <- write_constraints_8(variables = variables, inputs = inputs)
allC <- all_constraints(c0 = c0, c1 = c2, c2 = c2, c3 = c3, c4 = c4, c5 = c5, c6 = c6, c7 = c7, c8 = c8)
# write the .lp file
data = "testFile.lp"
write("enter Problem", data)
write("", data, append = TRUE)
write("Minimize", data, append = TRUE)
write(oF, data, append = TRUE)
write("Subject To", data, append = TRUE)
write(allC, data, append = TRUE)
write("Bounds", data, append = TRUE)
write(bounds, data, append = TRUE)
write("Integers", data, append = TRUE)
for(i in 1:length(variables)){
write(variables[[i]]$variables, data, append = TRUE)
}
write("End", data, append = TRUE)
system(paste0(getwd(), "/cplex -f cplexCommand.txt"))
file.remove(... = "cplex.log")
library(XML)
cplexSolutionFileName <- "results1.txt"
for(i in 1:length(variables)){
readOutResult(cplexSolutionFileName = cplexSolutionFileName, variables = variables, pknList = pknList, conditionIDX = i)
}
variables$Condition_1$exp
# file.remove(... = "results1.txt")
file.remove(... = "testFile.lp")
